
F411_Heatplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007870  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a68  08007a68  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a70  08007a70  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cac  200000fc  08007b74  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001da8  08007b74  00021da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010881  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000318f  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00033b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a03  00000000  00000000  000348f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019457  00000000  00000000  000352fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129b4  00000000  00000000  0004e752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000932b0  00000000  00000000  00061106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035e4  00000000  00000000  000f43b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000f799c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080079f0 	.word	0x080079f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080079f0 	.word	0x080079f0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa6a 	bl	80009b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80a 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8fe 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e4:	f000 f8dc 	bl	80006a0 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e8:	f000 f86c 	bl	80005c4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 fd6a 	bl	8006fc4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x1c>
	...

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f007 fa48 	bl	8007998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b27      	ldr	r3, [pc, #156]	; (80005bc <SystemClock_Config+0xc8>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a26      	ldr	r2, [pc, #152]	; (80005bc <SystemClock_Config+0xc8>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b24      	ldr	r3, [pc, #144]	; (80005bc <SystemClock_Config+0xc8>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <SystemClock_Config+0xcc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a20      	ldr	r2, [pc, #128]	; (80005c0 <SystemClock_Config+0xcc>)
 800053e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <SystemClock_Config+0xcc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000564:	2319      	movs	r3, #25
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000568:	23c0      	movs	r3, #192	; 0xc0
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000570:	2304      	movs	r3, #4
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fe29 	bl	80031d0 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000584:	f000 f8e2 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2103      	movs	r1, #3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 f88b 	bl	80036c0 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005b0:	f000 f8cc 	bl	800074c <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	; 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <MX_ADC1_Init+0xd0>)
 80005d8:	4a2f      	ldr	r2, [pc, #188]	; (8000698 <MX_ADC1_Init+0xd4>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005dc:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <MX_ADC1_Init+0xd0>)
 80005de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <MX_ADC1_Init+0xd0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_ADC1_Init+0xd0>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_ADC1_Init+0xd0>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_ADC1_Init+0xd0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_ADC1_Init+0xd0>)
 8000600:	2200      	movs	r2, #0
 8000602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000604:	4b23      	ldr	r3, [pc, #140]	; (8000694 <MX_ADC1_Init+0xd0>)
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <MX_ADC1_Init+0xd8>)
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_ADC1_Init+0xd0>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_ADC1_Init+0xd0>)
 8000612:	2203      	movs	r2, #3
 8000614:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0xd0>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC1_Init+0xd0>)
 8000620:	2201      	movs	r2, #1
 8000622:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000624:	481b      	ldr	r0, [pc, #108]	; (8000694 <MX_ADC1_Init+0xd0>)
 8000626:	f000 fa59 	bl	8000adc <HAL_ADC_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000630:	f000 f88c 	bl	800074c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800063c:	2303      	movs	r3, #3
 800063e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	4619      	mov	r1, r3
 8000644:	4813      	ldr	r0, [pc, #76]	; (8000694 <MX_ADC1_Init+0xd0>)
 8000646:	f000 fbbb 	bl	8000dc0 <HAL_ADC_ConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000650:	f000 f87c 	bl	800074c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000654:	2301      	movs	r3, #1
 8000656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_ADC1_Init+0xd0>)
 8000662:	f000 fbad 	bl	8000dc0 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800066c:	f000 f86e 	bl	800074c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000670:	2302      	movs	r3, #2
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC1_Init+0xd0>)
 800067e:	f000 fb9f 	bl	8000dc0 <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000688:	f000 f860 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000118 	.word	0x20000118
 8000698:	40012000 	.word	0x40012000
 800069c:	0f000001 	.word	0x0f000001

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_DMA_Init+0x3c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <MX_DMA_Init+0x3c>)
 80006b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_DMA_Init+0x3c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2038      	movs	r0, #56	; 0x38
 80006c8:	f000 fe8d 	bl	80013e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006cc:	2038      	movs	r0, #56	; 0x38
 80006ce:	f000 fea6 	bl	800141e <HAL_NVIC_EnableIRQ>

}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_GPIO_Init+0x68>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a16      	ldr	r2, [pc, #88]	; (8000748 <MX_GPIO_Init+0x68>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_GPIO_Init+0x68>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_GPIO_Init+0x68>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <MX_GPIO_Init+0x68>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_GPIO_Init+0x68>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_GPIO_Init+0x68>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <MX_GPIO_Init+0x68>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_GPIO_Init+0x68>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <HAL_MspInit+0x4c>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6453      	str	r3, [r2, #68]	; 0x44
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x4c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_MspInit+0x4c>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a33      	ldr	r2, [pc, #204]	; (8000894 <HAL_ADC_MspInit+0xec>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d15f      	bne.n	800088a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <HAL_ADC_MspInit+0xf0>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a31      	ldr	r2, [pc, #196]	; (8000898 <HAL_ADC_MspInit+0xf0>)
 80007d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <HAL_ADC_MspInit+0xf0>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <HAL_ADC_MspInit+0xf0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <HAL_ADC_MspInit+0xf0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <HAL_ADC_MspInit+0xf0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000802:	2307      	movs	r3, #7
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4821      	ldr	r0, [pc, #132]	; (800089c <HAL_ADC_MspInit+0xf4>)
 8000816:	f001 f907 	bl	8001a28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <HAL_ADC_MspInit+0xfc>)
 800081e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 8000834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000838:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 800083c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000840:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 8000844:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000848:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 800084c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000850:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800085e:	4810      	ldr	r0, [pc, #64]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 8000860:	f000 fdf8 	bl	8001454 <HAL_DMA_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800086a:	f7ff ff6f 	bl	800074c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 8000872:	639a      	str	r2, [r3, #56]	; 0x38
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_ADC_MspInit+0xf8>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2012      	movs	r0, #18
 8000880:	f000 fdb1 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000884:	2012      	movs	r0, #18
 8000886:	f000 fdca 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40012000 	.word	0x40012000
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	20000160 	.word	0x20000160
 80008a4:	40026410 	.word	0x40026410

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 f8ae 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <ADC_IRQHandler+0x10>)
 8000902:	f000 f92e 	bl	8000b62 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000118 	.word	0x20000118

08000910 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <DMA2_Stream0_IRQHandler+0x10>)
 8000916:	f000 fe4b 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000160 	.word	0x20000160

08000924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <OTG_FS_IRQHandler+0x10>)
 800092a:	f001 fb45 	bl	8001fb8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200016a4 	.word	0x200016a4

08000938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000994 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000960:	f7ff ffea 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	; (800099c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	; (80009a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098a:	f007 f80d 	bl	80079a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098e:	f7ff fda1 	bl	80004d4 <main>
  bx  lr    
 8000992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80009a0:	08007a78 	.word	0x08007a78
  ldr r2, =_sbss
 80009a4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80009a8:	20001da8 	.word	0x20001da8

080009ac <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <DMA1_Stream0_IRQHandler>
	...

080009b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <HAL_Init+0x40>)
 80009ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_Init+0x40>)
 80009c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <HAL_Init+0x40>)
 80009d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 fcf9 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff feb8 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023c00 	.word	0x40023c00

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fd11 	bl	800143a <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f000 fcd9 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	200001c0 	.word	0x200001c0

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200001c0 	.word	0x200001c0

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff ffee 	bl	8000a7c <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aba:	bf00      	nop
 8000abc:	f7ff ffde 	bl	8000a7c <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008

08000adc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e033      	b.n	8000b5a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d109      	bne.n	8000b0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fe54 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d118      	bne.n	8000b4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b22:	f023 0302 	bic.w	r3, r3, #2
 8000b26:	f043 0202 	orr.w	r2, r3, #2
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 fa78 	bl	8001024 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f023 0303 	bic.w	r3, r3, #3
 8000b42:	f043 0201 	orr.w	r2, r3, #1
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	641a      	str	r2, [r3, #64]	; 0x40
 8000b4a:	e001      	b.n	8000b50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d049      	beq.n	8000c2c <HAL_ADC_IRQHandler+0xca>
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d046      	beq.n	8000c2c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d105      	bne.n	8000bb6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d12b      	bne.n	8000c1c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d127      	bne.n	8000c1c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d006      	beq.n	8000be8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d119      	bne.n	8000c1c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 0220 	bic.w	r2, r2, #32
 8000bf6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f043 0201 	orr.w	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 f8b0 	bl	8000d82 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f06f 0212 	mvn.w	r2, #18
 8000c2a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d057      	beq.n	8000cf2 <HAL_ADC_IRQHandler+0x190>
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d054      	beq.n	8000cf2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d105      	bne.n	8000c60 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d139      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c74:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d12b      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d124      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d11d      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d119      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cbc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d105      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f043 0201 	orr.w	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 fa9a 	bl	800121c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f06f 020c 	mvn.w	r2, #12
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d00:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d017      	beq.n	8000d38 <HAL_ADC_IRQHandler+0x1d6>
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d014      	beq.n	8000d38 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d10d      	bne.n	8000d38 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f834 	bl	8000d96 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f06f 0201 	mvn.w	r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d46:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d015      	beq.n	8000d7a <HAL_ADC_IRQHandler+0x218>
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d012      	beq.n	8000d7a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	f043 0202 	orr.w	r2, r3, #2
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f06f 0220 	mvn.w	r2, #32
 8000d68:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f81d 	bl	8000daa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f06f 0220 	mvn.w	r2, #32
 8000d78:	601a      	str	r2, [r3, #0]
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d101      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x1c>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e113      	b.n	8001004 <HAL_ADC_ConfigChannel+0x244>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b09      	cmp	r3, #9
 8000dea:	d925      	bls.n	8000e38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68d9      	ldr	r1, [r3, #12]
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	3b1e      	subs	r3, #30
 8000e02:	2207      	movs	r2, #7
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43da      	mvns	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	400a      	ands	r2, r1
 8000e10:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68d9      	ldr	r1, [r3, #12]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4403      	add	r3, r0
 8000e2a:	3b1e      	subs	r3, #30
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	e022      	b.n	8000e7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6919      	ldr	r1, [r3, #16]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	400a      	ands	r2, r1
 8000e5a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6919      	ldr	r1, [r3, #16]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4403      	add	r3, r0
 8000e74:	409a      	lsls	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d824      	bhi.n	8000ed0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	3b05      	subs	r3, #5
 8000e98:	221f      	movs	r2, #31
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3b05      	subs	r3, #5
 8000ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ece:	e04c      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b0c      	cmp	r3, #12
 8000ed6:	d824      	bhi.n	8000f22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3b23      	subs	r3, #35	; 0x23
 8000eea:	221f      	movs	r2, #31
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43da      	mvns	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	3b23      	subs	r3, #35	; 0x23
 8000f14:	fa00 f203 	lsl.w	r2, r0, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f20:	e023      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	3b41      	subs	r3, #65	; 0x41
 8000f34:	221f      	movs	r2, #31
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	400a      	ands	r2, r1
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3b41      	subs	r3, #65	; 0x41
 8000f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <HAL_ADC_ConfigChannel+0x250>)
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a28      	ldr	r2, [pc, #160]	; (8001014 <HAL_ADC_ConfigChannel+0x254>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d10f      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x1d8>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b12      	cmp	r3, #18
 8000f7e:	d10b      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_ADC_ConfigChannel+0x254>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12b      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x23a>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <HAL_ADC_ConfigChannel+0x258>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d003      	beq.n	8000fb4 <HAL_ADC_ConfigChannel+0x1f4>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b11      	cmp	r3, #17
 8000fb2:	d122      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a11      	ldr	r2, [pc, #68]	; (8001018 <HAL_ADC_ConfigChannel+0x258>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d111      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_ADC_ConfigChannel+0x25c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_ADC_ConfigChannel+0x260>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	0c9a      	lsrs	r2, r3, #18
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000fec:	e002      	b.n	8000ff4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f9      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40012300 	.word	0x40012300
 8001014:	40012000 	.word	0x40012000
 8001018:	10000012 	.word	0x10000012
 800101c:	20000000 	.word	0x20000000
 8001020:	431bde83 	.word	0x431bde83

08001024 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800102c:	4b79      	ldr	r3, [pc, #484]	; (8001214 <ADC_Init+0x1f0>)
 800102e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	431a      	orrs	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001058:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6859      	ldr	r1, [r3, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	021a      	lsls	r2, r3, #8
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800107c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6859      	ldr	r1, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800109e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6899      	ldr	r1, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	4a58      	ldr	r2, [pc, #352]	; (8001218 <ADC_Init+0x1f4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d022      	beq.n	8001102 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6899      	ldr	r1, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6899      	ldr	r1, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	e00f      	b.n	8001122 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001110:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001120:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0202 	bic.w	r2, r2, #2
 8001130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6899      	ldr	r1, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7e1b      	ldrb	r3, [r3, #24]
 800113c:	005a      	lsls	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d01b      	beq.n	8001188 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800115e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800116e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6859      	ldr	r1, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	3b01      	subs	r3, #1
 800117c:	035a      	lsls	r2, r3, #13
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	e007      	b.n	8001198 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001196:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	051a      	lsls	r2, r3, #20
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6899      	ldr	r1, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011da:	025a      	lsls	r2, r3, #9
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6899      	ldr	r1, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	029a      	lsls	r2, r3, #10
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	609a      	str	r2, [r3, #8]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40012300 	.word	0x40012300
 8001218:	0f000001 	.word	0x0f000001

0800121c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff3e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff31 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff fb0c 	bl	8000a7c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e099      	b.n	80015a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001490:	e00f      	b.n	80014b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001492:	f7ff faf3 	bl	8000a7c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b05      	cmp	r3, #5
 800149e:	d908      	bls.n	80014b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2220      	movs	r2, #32
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2203      	movs	r2, #3
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e078      	b.n	80015a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e8      	bne.n	8001492 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	4b38      	ldr	r3, [pc, #224]	; (80015ac <HAL_DMA_Init+0x158>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4313      	orrs	r3, r2
 8001502:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	2b04      	cmp	r3, #4
 800150a:	d107      	bne.n	800151c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4313      	orrs	r3, r2
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f023 0307 	bic.w	r3, r3, #7
 8001532:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	4313      	orrs	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	2b04      	cmp	r3, #4
 8001544:	d117      	bne.n	8001576 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4313      	orrs	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00e      	beq.n	8001576 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f9e9 	bl	8001930 <DMA_CheckFifoParam>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001572:	2301      	movs	r3, #1
 8001574:	e016      	b.n	80015a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f9a0 	bl	80018c4 <DMA_CalcBaseAndBitshift>
 8001584:	4603      	mov	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	223f      	movs	r2, #63	; 0x3f
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	f010803f 	.word	0xf010803f

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015bc:	4b8e      	ldr	r3, [pc, #568]	; (80017f8 <HAL_DMA_IRQHandler+0x248>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a8e      	ldr	r2, [pc, #568]	; (80017fc <HAL_DMA_IRQHandler+0x24c>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	2208      	movs	r2, #8
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01a      	beq.n	800161c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001608:	2208      	movs	r2, #8
 800160a:	409a      	lsls	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d012      	beq.n	8001652 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2201      	movs	r2, #1
 8001640:	409a      	lsls	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	f043 0202 	orr.w	r2, r3, #2
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2204      	movs	r2, #4
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d012      	beq.n	8001688 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00b      	beq.n	8001688 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	2204      	movs	r2, #4
 8001676:	409a      	lsls	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	f043 0204 	orr.w	r2, r3, #4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	2210      	movs	r2, #16
 800168e:	409a      	lsls	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d043      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d03c      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	2210      	movs	r2, #16
 80016ac:	409a      	lsls	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d018      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d024      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
 80016de:	e01f      	b.n	8001720 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
 80016f0:	e016      	b.n	8001720 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d107      	bne.n	8001710 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0208 	bic.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	2220      	movs	r2, #32
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 808f 	beq.w	8001850 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8087 	beq.w	8001850 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	2220      	movs	r2, #32
 8001748:	409a      	lsls	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b05      	cmp	r3, #5
 8001758:	d136      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0216 	bic.w	r2, r2, #22
 8001768:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001778:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d103      	bne.n	800178a <HAL_DMA_IRQHandler+0x1da>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0208 	bic.w	r2, r2, #8
 8001798:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179e:	223f      	movs	r2, #63	; 0x3f
 80017a0:	409a      	lsls	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d07e      	beq.n	80018bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
        }
        return;
 80017c6:	e079      	b.n	80018bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01d      	beq.n	8001812 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10d      	bne.n	8001800 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d031      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
 80017f4:	e02c      	b.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
 80017f6:	bf00      	nop
 80017f8:	20000000 	.word	0x20000000
 80017fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d023      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
 8001810:	e01e      	b.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10f      	bne.n	8001840 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0210 	bic.w	r2, r2, #16
 800182e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001854:	2b00      	cmp	r3, #0
 8001856:	d032      	beq.n	80018be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d022      	beq.n	80018aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2205      	movs	r2, #5
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3301      	adds	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	d307      	bcc.n	8001898 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f2      	bne.n	800187c <HAL_DMA_IRQHandler+0x2cc>
 8001896:	e000      	b.n	800189a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001898:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
 80018ba:	e000      	b.n	80018be <HAL_DMA_IRQHandler+0x30e>
        return;
 80018bc:	bf00      	nop
    }
  }
}
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3b10      	subs	r3, #16
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <DMA_CalcBaseAndBitshift+0x64>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <DMA_CalcBaseAndBitshift+0x68>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d909      	bls.n	8001906 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	1d1a      	adds	r2, r3, #4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	659a      	str	r2, [r3, #88]	; 0x58
 8001904:	e007      	b.n	8001916 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	aaaaaaab 	.word	0xaaaaaaab
 800192c:	08007a60 	.word	0x08007a60

08001930 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11f      	bne.n	800198a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d856      	bhi.n	80019fe <DMA_CheckFifoParam+0xce>
 8001950:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <DMA_CheckFifoParam+0x28>)
 8001952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001956:	bf00      	nop
 8001958:	08001969 	.word	0x08001969
 800195c:	0800197b 	.word	0x0800197b
 8001960:	08001969 	.word	0x08001969
 8001964:	080019ff 	.word	0x080019ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d046      	beq.n	8001a02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001978:	e043      	b.n	8001a02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001982:	d140      	bne.n	8001a06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001988:	e03d      	b.n	8001a06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001992:	d121      	bne.n	80019d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d837      	bhi.n	8001a0a <DMA_CheckFifoParam+0xda>
 800199a:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <DMA_CheckFifoParam+0x70>)
 800199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	080019b7 	.word	0x080019b7
 80019a8:	080019b1 	.word	0x080019b1
 80019ac:	080019c9 	.word	0x080019c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      break;
 80019b4:	e030      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d025      	beq.n	8001a0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c6:	e022      	b.n	8001a0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019d0:	d11f      	bne.n	8001a12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019d6:	e01c      	b.n	8001a12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d903      	bls.n	80019e6 <DMA_CheckFifoParam+0xb6>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d003      	beq.n	80019ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019e4:	e018      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
      break;
 80019ea:	e015      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00e      	beq.n	8001a16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      break;
 80019fc:	e00b      	b.n	8001a16 <DMA_CheckFifoParam+0xe6>
      break;
 80019fe:	bf00      	nop
 8001a00:	e00a      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a02:	bf00      	nop
 8001a04:	e008      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a06:	bf00      	nop
 8001a08:	e006      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a0a:	bf00      	nop
 8001a0c:	e004      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a0e:	bf00      	nop
 8001a10:	e002      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
    }
  } 
  
  return status; 
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e159      	b.n	8001cf8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8148 	bne.w	8001cf2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a2 	beq.w	8001cf2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a56      	ldr	r2, [pc, #344]	; (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b54      	ldr	r3, [pc, #336]	; (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a49      	ldr	r2, [pc, #292]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x202>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_GPIO_Init+0x2f4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x1fe>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a47      	ldr	r2, [pc, #284]	; (8001d20 <HAL_GPIO_Init+0x2f8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a46      	ldr	r2, [pc, #280]	; (8001d24 <HAL_GPIO_Init+0x2fc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x1f6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a45      	ldr	r2, [pc, #276]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x1f2>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x204>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	; (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a2f      	ldr	r2, [pc, #188]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_GPIO_Init+0x304>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f aea2 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e101      	b.n	8001f46 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f005 fb11 	bl	8007384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d70:	d102      	bne.n	8001d78 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 ff6e 	bl	8003c5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7c1a      	ldrb	r2, [r3, #16]
 8001d8a:	f88d 2000 	strb.w	r2, [sp]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d92:	f001 fe4d 	bl	8003a30 <USB_CoreInit>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0ce      	b.n	8001f46 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 ff66 	bl	8003c80 <USB_SetCurrentMode>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0bf      	b.n	8001f46 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	e04a      	b.n	8001e62 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	3315      	adds	r3, #21
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	3314      	adds	r3, #20
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	b298      	uxth	r0, r3
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	332e      	adds	r3, #46	; 0x2e
 8001e08:	4602      	mov	r2, r0
 8001e0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3318      	adds	r3, #24
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	331c      	adds	r3, #28
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3320      	adds	r3, #32
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	3324      	adds	r3, #36	; 0x24
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	791b      	ldrb	r3, [r3, #4]
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d3af      	bcc.n	8001dcc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e044      	b.n	8001efc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3b5      	bcc.n	8001e72 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7c1a      	ldrb	r2, [r3, #16]
 8001f0e:	f88d 2000 	strb.w	r2, [sp]
 8001f12:	3304      	adds	r3, #4
 8001f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f16:	f001 feff 	bl	8003d18 <USB_DevInit>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e00c      	b.n	8001f46 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 ff43 	bl	8004dca <USB_DevDisconnect>

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_PCD_Start+0x1c>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e022      	b.n	8001fb0 <HAL_PCD_Start+0x62>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 fe50 	bl	8003c3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fef1 	bl	8004d88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b08d      	sub	sp, #52	; 0x34
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 ffaf 	bl	8004f32 <USB_GetMode>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 848c 	bne.w	80028f4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 ff13 	bl	8004e0c <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8482 	beq.w	80028f2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f002 ff00 	bl	8004e0c <USB_ReadInterrupts>
 800200c:	4603      	mov	r3, r0
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b02      	cmp	r3, #2
 8002014:	d107      	bne.n	8002026 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f002 0202 	and.w	r2, r2, #2
 8002024:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f002 feee 	bl	8004e0c <USB_ReadInterrupts>
 8002030:	4603      	mov	r3, r0
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b10      	cmp	r3, #16
 8002038:	d161      	bne.n	80020fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0210 	bic.w	r2, r2, #16
 8002048:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f003 020f 	and.w	r2, r3, #15
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	3304      	adds	r3, #4
 8002068:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	0c5b      	lsrs	r3, r3, #17
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	2b02      	cmp	r3, #2
 8002074:	d124      	bne.n	80020c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d035      	beq.n	80020ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	6a38      	ldr	r0, [r7, #32]
 8002096:	f002 fd25 	bl	8004ae4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a6:	441a      	add	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020b8:	441a      	add	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	615a      	str	r2, [r3, #20]
 80020be:	e016      	b.n	80020ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	0c5b      	lsrs	r3, r3, #17
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	2b06      	cmp	r3, #6
 80020ca:	d110      	bne.n	80020ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80020d2:	2208      	movs	r2, #8
 80020d4:	4619      	mov	r1, r3
 80020d6:	6a38      	ldr	r0, [r7, #32]
 80020d8:	f002 fd04 	bl	8004ae4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020e8:	441a      	add	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0210 	orr.w	r2, r2, #16
 80020fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f002 fe82 	bl	8004e0c <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002112:	f040 80a7 	bne.w	8002264 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f002 fe87 	bl	8004e32 <USB_ReadDevAllOutEpInterrupt>
 8002124:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002126:	e099      	b.n	800225c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 808e 	beq.w	8002250 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f002 feab 	bl	8004e9a <USB_ReadDevOutEPInterrupt>
 8002144:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00c      	beq.n	800216a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215c:	461a      	mov	r2, r3
 800215e:	2301      	movs	r3, #1
 8002160:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fea1 	bl	8002eac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00c      	beq.n	800218e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002180:	461a      	mov	r2, r3
 8002182:	2308      	movs	r3, #8
 8002184:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 ff77 	bl	800307c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a4:	461a      	mov	r2, r3
 80021a6:	2310      	movs	r3, #16
 80021a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d030      	beq.n	8002216 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	2b80      	cmp	r3, #128	; 0x80
 80021be:	d109      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	3304      	adds	r3, #4
 80021e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	78db      	ldrb	r3, [r3, #3]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d108      	bne.n	8002204 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2200      	movs	r2, #0
 80021f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4619      	mov	r1, r3
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f005 f9bc 	bl	800757c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002210:	461a      	mov	r2, r3
 8002212:	2302      	movs	r3, #2
 8002214:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222c:	461a      	mov	r2, r3
 800222e:	2320      	movs	r3, #32
 8002230:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002248:	461a      	mov	r2, r3
 800224a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	3301      	adds	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	2b00      	cmp	r3, #0
 8002260:	f47f af62 	bne.w	8002128 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f002 fdcf 	bl	8004e0c <USB_ReadInterrupts>
 800226e:	4603      	mov	r3, r0
 8002270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002274:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002278:	f040 80db 	bne.w	8002432 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fdf0 	bl	8004e66 <USB_ReadDevAllInEpInterrupt>
 8002286:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800228c:	e0cd      	b.n	800242a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80c2 	beq.w	800241e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fe16 	bl	8004ed6 <USB_ReadDevInEPInterrupt>
 80022aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d057      	beq.n	8002366 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	2201      	movs	r2, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69f9      	ldr	r1, [r7, #28]
 80022d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022d6:	4013      	ands	r3, r2
 80022d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e6:	461a      	mov	r2, r3
 80022e8:	2301      	movs	r3, #1
 80022ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	799b      	ldrb	r3, [r3, #6]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d132      	bne.n	800235a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3320      	adds	r3, #32
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4403      	add	r3, r0
 8002314:	331c      	adds	r3, #28
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4419      	add	r1, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4403      	add	r3, r0
 8002328:	3320      	adds	r3, #32
 800232a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	2b00      	cmp	r3, #0
 8002330:	d113      	bne.n	800235a <HAL_PCD_IRQHandler+0x3a2>
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3324      	adds	r3, #36	; 0x24
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d108      	bne.n	800235a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002352:	461a      	mov	r2, r3
 8002354:	2101      	movs	r1, #1
 8002356:	f002 fe1d 	bl	8004f94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f005 f890 	bl	8007486 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800237c:	461a      	mov	r2, r3
 800237e:	2308      	movs	r3, #8
 8002380:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002398:	461a      	mov	r2, r3
 800239a:	2310      	movs	r3, #16
 800239c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b4:	461a      	mov	r2, r3
 80023b6:	2340      	movs	r3, #64	; 0x40
 80023b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c6:	6a38      	ldr	r0, [r7, #32]
 80023c8:	f001 fe0a 	bl	8003fe0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	3310      	adds	r3, #16
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	78db      	ldrb	r3, [r3, #3]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d108      	bne.n	80023fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2200      	movs	r2, #0
 80023ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f005 f8d3 	bl	80075a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002406:	461a      	mov	r2, r3
 8002408:	2302      	movs	r3, #2
 800240a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fcbb 	bl	8002d94 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	3301      	adds	r3, #1
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f af2e 	bne.w	800228e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f002 fce8 	bl	8004e0c <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002446:	d122      	bne.n	800248e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800246e:	2100      	movs	r1, #0
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fea1 	bl	80031b8 <HAL_PCDEx_LPM_Callback>
 8002476:	e002      	b.n	800247e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f005 f871 	bl	8007560 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800248c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f002 fcba 	bl	8004e0c <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024a2:	d112      	bne.n	80024ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d102      	bne.n	80024ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f005 f82d 	bl	8007514 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024c8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fc9c 	bl	8004e0c <USB_ReadInterrupts>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024de:	f040 80b7 	bne.w	8002650 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2110      	movs	r1, #16
 80024fc:	4618      	mov	r0, r3
 80024fe:	f001 fd6f 	bl	8003fe0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002506:	e046      	b.n	8002596 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002514:	461a      	mov	r2, r3
 8002516:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800251a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252c:	0151      	lsls	r1, r2, #5
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	440a      	add	r2, r1
 8002532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800253a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002548:	461a      	mov	r2, r3
 800254a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800254e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4413      	add	r3, r2
 8002558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002560:	0151      	lsls	r1, r2, #5
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	440a      	add	r2, r1
 8002566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800256a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800256e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002580:	0151      	lsls	r1, r2, #5
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	440a      	add	r2, r1
 8002586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800258a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800258e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	3301      	adds	r3, #1
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	791b      	ldrb	r3, [r3, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	4293      	cmp	r3, r2
 80025a0:	d3b2      	bcc.n	8002508 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	7bdb      	ldrb	r3, [r3, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d016      	beq.n	80025ec <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ce:	f043 030b 	orr.w	r3, r3, #11
 80025d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e4:	f043 030b 	orr.w	r3, r3, #11
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	e015      	b.n	8002618 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002602:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002612:	f043 030b 	orr.w	r3, r3, #11
 8002616:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002626:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800262a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800263a:	461a      	mov	r2, r3
 800263c:	f002 fcaa 	bl	8004f94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800264e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fbd9 	bl	8004e0c <USB_ReadInterrupts>
 800265a:	4603      	mov	r3, r0
 800265c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002664:	d123      	bne.n	80026ae <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f002 fc6f 	bl	8004f4e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f001 fd2c 	bl	80040d2 <USB_GetDevSpeed>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681c      	ldr	r4, [r3, #0]
 8002686:	f001 f9c7 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 800268a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002690:	461a      	mov	r2, r3
 8002692:	4620      	mov	r0, r4
 8002694:	f001 fa30 	bl	8003af8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f004 ff1c 	bl	80074d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 fbaa 	bl	8004e0c <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d10a      	bne.n	80026d8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f004 fef9 	bl	80074ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f002 0208 	and.w	r2, r2, #8
 80026d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 fb95 	bl	8004e0c <USB_ReadInterrupts>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d123      	bne.n	8002734 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f8:	2301      	movs	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	e014      	b.n	8002728 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d105      	bne.n	8002722 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fb08 	bl	8002d32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	3301      	adds	r3, #1
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	791b      	ldrb	r3, [r3, #4]
 800272c:	461a      	mov	r2, r3
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	4293      	cmp	r3, r2
 8002732:	d3e4      	bcc.n	80026fe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fb67 	bl	8004e0c <USB_ReadInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002748:	d13c      	bne.n	80027c4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800274a:	2301      	movs	r3, #1
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
 800274e:	e02b      	b.n	80027a8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3318      	adds	r3, #24
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d115      	bne.n	80027a2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002776:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	da12      	bge.n	80027a2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3317      	adds	r3, #23
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4619      	mov	r1, r3
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fac8 	bl	8002d32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	3301      	adds	r3, #1
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	791b      	ldrb	r3, [r3, #4]
 80027ac:	461a      	mov	r2, r3
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d3cd      	bcc.n	8002750 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 fb1f 	bl	8004e0c <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027d8:	d156      	bne.n	8002888 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027da:	2301      	movs	r3, #1
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	e045      	b.n	800286c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d12e      	bne.n	8002866 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002808:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	da2b      	bge.n	8002866 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800281a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800281e:	429a      	cmp	r2, r3
 8002820:	d121      	bne.n	8002866 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002862:	6053      	str	r3, [r2, #4]
            break;
 8002864:	e008      	b.n	8002878 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	3301      	adds	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	791b      	ldrb	r3, [r3, #4]
 8002870:	461a      	mov	r2, r3
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	4293      	cmp	r3, r2
 8002876:	d3b3      	bcc.n	80027e0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fabd 	bl	8004e0c <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d10a      	bne.n	80028b4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f004 fe90 	bl	80075c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 faa7 	bl	8004e0c <USB_ReadInterrupts>
 80028be:	4603      	mov	r3, r0
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d115      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f004 fe80 	bl	80075e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	e000      	b.n	80028f4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80028f2:	bf00      	nop
    }
  }
}
 80028f4:	3734      	adds	r7, #52	; 0x34
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd90      	pop	{r4, r7, pc}

080028fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_PCD_SetAddress+0x1a>
 8002910:	2302      	movs	r3, #2
 8002912:	e012      	b.n	800293a <HAL_PCD_SetAddress+0x40>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f002 fa06 	bl	8004d3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	4608      	mov	r0, r1
 800294c:	4611      	mov	r1, r2
 800294e:	461a      	mov	r2, r3
 8002950:	4603      	mov	r3, r0
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	460b      	mov	r3, r1
 8002956:	803b      	strh	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002964:	2b00      	cmp	r3, #0
 8002966:	da0f      	bge.n	8002988 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	3310      	adds	r3, #16
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	3304      	adds	r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	705a      	strb	r2, [r3, #1]
 8002986:	e00f      	b.n	80029a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 020f 	and.w	r2, r3, #15
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	3304      	adds	r3, #4
 80029a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029b4:	883a      	ldrh	r2, [r7, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	78ba      	ldrb	r2, [r7, #2]
 80029be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029d2:	78bb      	ldrb	r3, [r7, #2]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d102      	bne.n	80029de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_PCD_EP_Open+0xaa>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e00e      	b.n	8002a0a <HAL_PCD_EP_Open+0xc8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68f9      	ldr	r1, [r7, #12]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 fb8e 	bl	800411c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002a08:	7afb      	ldrb	r3, [r7, #11]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	da0f      	bge.n	8002a46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 020f 	and.w	r2, r3, #15
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	3310      	adds	r3, #16
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	705a      	strb	r2, [r3, #1]
 8002a44:	e00f      	b.n	8002a66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_PCD_EP_Close+0x6e>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e00e      	b.n	8002a9e <HAL_PCD_EP_Close+0x8c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68f9      	ldr	r1, [r7, #12]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 fbcc 	bl	800422c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	3304      	adds	r3, #4
 8002ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	799b      	ldrb	r3, [r3, #6]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d102      	bne.n	8002b02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	799b      	ldrb	r3, [r3, #6]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6979      	ldr	r1, [r7, #20]
 8002b0e:	f001 fc69 	bl	80043e4 <USB_EPStartXfer>

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 020f 	and.w	r2, r3, #15
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2200      	movs	r2, #0
 8002b84:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	799b      	ldrb	r3, [r3, #6]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d102      	bne.n	8002ba6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	799b      	ldrb	r3, [r3, #6]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6979      	ldr	r1, [r7, #20]
 8002bb2:	f001 fc17 	bl	80043e4 <USB_EPStartXfer>

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	7912      	ldrb	r2, [r2, #4]
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e04f      	b.n	8002c7e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da0f      	bge.n	8002c06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3310      	adds	r3, #16
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	705a      	strb	r2, [r3, #1]
 8002c04:	e00d      	b.n	8002c22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_PCD_EP_SetStall+0x82>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e01d      	b.n	8002c7e <HAL_PCD_EP_SetStall+0xbe>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f001 ff9f 	bl	8004b94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7999      	ldrb	r1, [r3, #6]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f002 f990 	bl	8004f94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	7912      	ldrb	r2, [r2, #4]
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e042      	b.n	8002d2a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	da0f      	bge.n	8002ccc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	3310      	adds	r3, #16
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	705a      	strb	r2, [r3, #1]
 8002cca:	e00f      	b.n	8002cec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	f003 020f 	and.w	r2, r3, #15
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_EP_ClrStall+0x86>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e00e      	b.n	8002d2a <HAL_PCD_EP_ClrStall+0xa4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 ffa8 	bl	8004c70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da0c      	bge.n	8002d60 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	3310      	adds	r3, #16
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e00c      	b.n	8002d7a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	3304      	adds	r3, #4
 8002d78:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f001 fdc7 	bl	8004914 <USB_EPStopXfer>
 8002d86:	4603      	mov	r3, r0
 8002d88:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	3310      	adds	r3, #16
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	3304      	adds	r3, #4
 8002dba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d901      	bls.n	8002dcc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e06b      	b.n	8002ea4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d902      	bls.n	8002de8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3303      	adds	r3, #3
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002df0:	e02a      	b.n	8002e48 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d902      	bls.n	8002e0e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3303      	adds	r3, #3
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4603      	mov	r3, r0
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f001 fe1c 	bl	8004a68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	441a      	add	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d809      	bhi.n	8002e72 <PCD_WriteEmptyTxFifo+0xde>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d203      	bcs.n	8002e72 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1bf      	bne.n	8002df2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d811      	bhi.n	8002ea2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	2201      	movs	r2, #1
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	6939      	ldr	r1, [r7, #16]
 8002e9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3720      	adds	r7, #32
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	333c      	adds	r3, #60	; 0x3c
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	799b      	ldrb	r3, [r3, #6]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d17b      	bne.n	8002fda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4a61      	ldr	r2, [pc, #388]	; (8003074 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	f240 80b9 	bls.w	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80b3 	beq.w	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f14:	6093      	str	r3, [r2, #8]
 8002f16:	e0a7      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2320      	movs	r3, #32
 8002f32:	6093      	str	r3, [r2, #8]
 8002f34:	e098      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8093 	bne.w	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d90f      	bls.n	8002f6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	e07e      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1a      	ldr	r2, [r3, #32]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	0159      	lsls	r1, r3, #5
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d114      	bne.n	8002fcc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f001 ffec 	bl	8004f94 <USB_EP0_OutStart>
 8002fbc:	e006      	b.n	8002fcc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f004 fa3c 	bl	8007450 <HAL_PCD_DataOutStageCallback>
 8002fd8:	e046      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	4a26      	ldr	r2, [pc, #152]	; (8003078 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d124      	bne.n	800302c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	e032      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003018:	461a      	mov	r2, r3
 800301a:	2320      	movs	r3, #32
 800301c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f004 fa13 	bl	8007450 <HAL_PCD_DataOutStageCallback>
 800302a:	e01d      	b.n	8003068 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d114      	bne.n	800305c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003054:	461a      	mov	r2, r3
 8003056:	2100      	movs	r1, #0
 8003058:	f001 ff9c 	bl	8004f94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f004 f9f4 	bl	8007450 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3720      	adds	r7, #32
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	4f54300a 	.word	0x4f54300a
 8003078:	4f54310a 	.word	0x4f54310a

0800307c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	333c      	adds	r3, #60	; 0x3c
 8003094:	3304      	adds	r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4a15      	ldr	r2, [pc, #84]	; (8003104 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d90e      	bls.n	80030d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f004 f9ab 	bl	800742c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <PCD_EP_OutSetupPacket_int+0x88>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d90c      	bls.n	80030f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	799b      	ldrb	r3, [r3, #6]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d108      	bne.n	80030f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80030f0:	461a      	mov	r2, r3
 80030f2:	2101      	movs	r1, #1
 80030f4:	f001 ff4e 	bl	8004f94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	4f54300a 	.word	0x4f54300a

08003108 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
 8003114:	4613      	mov	r3, r2
 8003116:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003126:	883b      	ldrh	r3, [r7, #0]
 8003128:	0419      	lsls	r1, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	430a      	orrs	r2, r1
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
 8003134:	e028      	b.n	8003188 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e00d      	b.n	8003166 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	3340      	adds	r3, #64	; 0x40
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	4413      	add	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	3301      	adds	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	3b01      	subs	r3, #1
 800316c:	429a      	cmp	r2, r3
 800316e:	d3ec      	bcc.n	800314a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003170:	883b      	ldrh	r3, [r7, #0]
 8003172:	0418      	lsls	r0, r3, #16
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6819      	ldr	r1, [r3, #0]
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	3b01      	subs	r3, #1
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	4302      	orrs	r2, r0
 8003180:	3340      	adds	r3, #64	; 0x40
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e267      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d075      	beq.n	80032da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ee:	4b88      	ldr	r3, [pc, #544]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00c      	beq.n	8003214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fa:	4b85      	ldr	r3, [pc, #532]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003202:	2b08      	cmp	r3, #8
 8003204:	d112      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003206:	4b82      	ldr	r3, [pc, #520]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003212:	d10b      	bne.n	800322c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	4b7e      	ldr	r3, [pc, #504]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d05b      	beq.n	80032d8 <HAL_RCC_OscConfig+0x108>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d157      	bne.n	80032d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e242      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d106      	bne.n	8003244 <HAL_RCC_OscConfig+0x74>
 8003236:	4b76      	ldr	r3, [pc, #472]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a75      	ldr	r2, [pc, #468]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x98>
 800324e:	4b70      	ldr	r3, [pc, #448]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6f      	ldr	r2, [pc, #444]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b6d      	ldr	r3, [pc, #436]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6c      	ldr	r2, [pc, #432]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xb0>
 8003268:	4b69      	ldr	r3, [pc, #420]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a68      	ldr	r2, [pc, #416]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a65      	ldr	r2, [pc, #404]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fbf8 	bl	8000a7c <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd fbf4 	bl	8000a7c <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e207      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b5b      	ldr	r3, [pc, #364]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xc0>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fd fbe4 	bl	8000a7c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd fbe0 	bl	8000a7c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1f3      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	4b51      	ldr	r3, [pc, #324]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0xe8>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e6:	4b4a      	ldr	r3, [pc, #296]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fe:	4b44      	ldr	r3, [pc, #272]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1c7      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4937      	ldr	r1, [pc, #220]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	e03a      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_RCC_OscConfig+0x244>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd fb99 	bl	8000a7c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334e:	f7fd fb95 	bl	8000a7c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1a8      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	4b28      	ldr	r3, [pc, #160]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4925      	ldr	r1, [pc, #148]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_OscConfig+0x244>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fd fb78 	bl	8000a7c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003390:	f7fd fb74 	bl	8000a7c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e187      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d036      	beq.n	8003428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d016      	beq.n	80033f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_RCC_OscConfig+0x248>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fd fb58 	bl	8000a7c <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fd fb54 	bl	8000a7c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e167      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_OscConfig+0x240>)
 80033e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x200>
 80033ee:	e01b      	b.n	8003428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_OscConfig+0x248>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7fd fb41 	bl	8000a7c <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	e00e      	b.n	800341c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fe:	f7fd fb3d 	bl	8000a7c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d907      	bls.n	800341c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e150      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
 8003410:	40023800 	.word	0x40023800
 8003414:	42470000 	.word	0x42470000
 8003418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800341e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ea      	bne.n	80033fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8097 	beq.w	8003564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343a:	4b81      	ldr	r3, [pc, #516]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10f      	bne.n	8003466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	4b7d      	ldr	r3, [pc, #500]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	4a7c      	ldr	r2, [pc, #496]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003454:	6413      	str	r3, [r2, #64]	; 0x40
 8003456:	4b7a      	ldr	r3, [pc, #488]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003466:	4b77      	ldr	r3, [pc, #476]	; (8003644 <HAL_RCC_OscConfig+0x474>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d118      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003472:	4b74      	ldr	r3, [pc, #464]	; (8003644 <HAL_RCC_OscConfig+0x474>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a73      	ldr	r2, [pc, #460]	; (8003644 <HAL_RCC_OscConfig+0x474>)
 8003478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347e:	f7fd fafd 	bl	8000a7c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003486:	f7fd faf9 	bl	8000a7c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e10c      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <HAL_RCC_OscConfig+0x474>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d106      	bne.n	80034ba <HAL_RCC_OscConfig+0x2ea>
 80034ac:	4b64      	ldr	r3, [pc, #400]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	4a63      	ldr	r2, [pc, #396]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70
 80034b8:	e01c      	b.n	80034f4 <HAL_RCC_OscConfig+0x324>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b05      	cmp	r3, #5
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x30c>
 80034c2:	4b5f      	ldr	r3, [pc, #380]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	4a5e      	ldr	r2, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70
 80034ce:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	4a5b      	ldr	r2, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6713      	str	r3, [r2, #112]	; 0x70
 80034da:	e00b      	b.n	80034f4 <HAL_RCC_OscConfig+0x324>
 80034dc:	4b58      	ldr	r3, [pc, #352]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a57      	ldr	r2, [pc, #348]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
 80034e8:	4b55      	ldr	r3, [pc, #340]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a54      	ldr	r2, [pc, #336]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80034ee:	f023 0304 	bic.w	r3, r3, #4
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d015      	beq.n	8003528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fd fabe 	bl	8000a7c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fd faba 	bl	8000a7c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0cb      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351a:	4b49      	ldr	r3, [pc, #292]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ee      	beq.n	8003504 <HAL_RCC_OscConfig+0x334>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fd faa8 	bl	8000a7c <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fd faa4 	bl	8000a7c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0b5      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ee      	bne.n	8003530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	4a38      	ldr	r2, [pc, #224]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80a1 	beq.w	80036b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800356e:	4b34      	ldr	r3, [pc, #208]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b08      	cmp	r3, #8
 8003578:	d05c      	beq.n	8003634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d141      	bne.n	8003606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b31      	ldr	r3, [pc, #196]	; (8003648 <HAL_RCC_OscConfig+0x478>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fd fa78 	bl	8000a7c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003590:	f7fd fa74 	bl	8000a7c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e087      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b27      	ldr	r3, [pc, #156]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	3b01      	subs	r3, #1
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	061b      	lsls	r3, r3, #24
 80035d2:	491b      	ldr	r1, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x478>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fd fa4d 	bl	8000a7c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fd fa49 	bl	8000a7c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e05c      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x416>
 8003604:	e054      	b.n	80036b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_RCC_OscConfig+0x478>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fd fa36 	bl	8000a7c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003614:	f7fd fa32 	bl	8000a7c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e045      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_OscConfig+0x470>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x444>
 8003632:	e03d      	b.n	80036b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e038      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
 8003640:	40023800 	.word	0x40023800
 8003644:	40007000 	.word	0x40007000
 8003648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCC_OscConfig+0x4ec>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d028      	beq.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d121      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d11a      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003684:	4293      	cmp	r3, r2
 8003686:	d111      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	3b01      	subs	r3, #1
 8003696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d107      	bne.n	80036ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800

080036c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0cc      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b68      	ldr	r3, [pc, #416]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d90c      	bls.n	80036fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b65      	ldr	r3, [pc, #404]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b63      	ldr	r3, [pc, #396]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0b8      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003714:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a58      	ldr	r2, [pc, #352]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800371e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800372c:	4b53      	ldr	r3, [pc, #332]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a52      	ldr	r2, [pc, #328]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003738:	4b50      	ldr	r3, [pc, #320]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	494d      	ldr	r1, [pc, #308]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d044      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d119      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e07f      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d003      	beq.n	800377e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377a:	2b03      	cmp	r3, #3
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	4b3f      	ldr	r3, [pc, #252]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06f      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378e:	4b3b      	ldr	r3, [pc, #236]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e067      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379e:	4b37      	ldr	r3, [pc, #220]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4934      	ldr	r1, [pc, #208]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b0:	f7fd f964 	bl	8000a7c <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fd f960 	bl	8000a7c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e04f      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 020c 	and.w	r2, r3, #12
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1eb      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d20c      	bcs.n	8003808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e032      	b.n	800386e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003814:	4b19      	ldr	r3, [pc, #100]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4916      	ldr	r1, [pc, #88]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	490e      	ldr	r1, [pc, #56]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003846:	f000 f821 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800384a:	4602      	mov	r2, r0
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	490a      	ldr	r1, [pc, #40]	; (8003880 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	5ccb      	ldrb	r3, [r1, r3]
 800385a:	fa22 f303 	lsr.w	r3, r2, r3
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd f8c4 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023c00 	.word	0x40023c00
 800387c:	40023800 	.word	0x40023800
 8003880:	08007a50 	.word	0x08007a50
 8003884:	20000000 	.word	0x20000000
 8003888:	20000004 	.word	0x20000004

0800388c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003890:	b090      	sub	sp, #64	; 0x40
 8003892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
 8003898:	2300      	movs	r3, #0
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389c:	2300      	movs	r3, #0
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a4:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d00d      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x40>
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	f200 80a1 	bhi.w	80039f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038be:	e09b      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038c4:	e09b      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038c6:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ca:	e098      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038cc:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d6:	4b4d      	ldr	r3, [pc, #308]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d028      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e2:	4b4a      	ldr	r3, [pc, #296]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	099b      	lsrs	r3, r3, #6
 80038e8:	2200      	movs	r2, #0
 80038ea:	623b      	str	r3, [r7, #32]
 80038ec:	627a      	str	r2, [r7, #36]	; 0x24
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038f4:	2100      	movs	r1, #0
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f8:	fb03 f201 	mul.w	r2, r3, r1
 80038fc:	2300      	movs	r3, #0
 80038fe:	fb00 f303 	mul.w	r3, r0, r3
 8003902:	4413      	add	r3, r2
 8003904:	4a43      	ldr	r2, [pc, #268]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003906:	fba0 1202 	umull	r1, r2, r0, r2
 800390a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800390c:	460a      	mov	r2, r1
 800390e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003912:	4413      	add	r3, r2
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	2200      	movs	r2, #0
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	61fa      	str	r2, [r7, #28]
 800391e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003922:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003926:	f7fc fc57 	bl	80001d8 <__aeabi_uldivmod>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4613      	mov	r3, r2
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003932:	e053      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003934:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	2200      	movs	r2, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	617a      	str	r2, [r7, #20]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003946:	f04f 0b00 	mov.w	fp, #0
 800394a:	4652      	mov	r2, sl
 800394c:	465b      	mov	r3, fp
 800394e:	f04f 0000 	mov.w	r0, #0
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	0159      	lsls	r1, r3, #5
 8003958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395c:	0150      	lsls	r0, r2, #5
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	ebb2 080a 	subs.w	r8, r2, sl
 8003966:	eb63 090b 	sbc.w	r9, r3, fp
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003976:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800397a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800397e:	ebb2 0408 	subs.w	r4, r2, r8
 8003982:	eb63 0509 	sbc.w	r5, r3, r9
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	00eb      	lsls	r3, r5, #3
 8003990:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003994:	00e2      	lsls	r2, r4, #3
 8003996:	4614      	mov	r4, r2
 8003998:	461d      	mov	r5, r3
 800399a:	eb14 030a 	adds.w	r3, r4, sl
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	eb45 030b 	adc.w	r3, r5, fp
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039b2:	4629      	mov	r1, r5
 80039b4:	028b      	lsls	r3, r1, #10
 80039b6:	4621      	mov	r1, r4
 80039b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039bc:	4621      	mov	r1, r4
 80039be:	028a      	lsls	r2, r1, #10
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	2200      	movs	r2, #0
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	60fa      	str	r2, [r7, #12]
 80039cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039d0:	f7fc fc02 	bl	80001d8 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	3301      	adds	r3, #1
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039f6:	e002      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80039fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3740      	adds	r7, #64	; 0x40
 8003a04:	46bd      	mov	sp, r7
 8003a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	017d7840 	.word	0x017d7840

08003a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000000 	.word	0x20000000

08003a30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a30:	b084      	sub	sp, #16
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	f107 001c 	add.w	r0, r7, #28
 8003a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a42:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d123      	bne.n	8003a92 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f001 fae2 	bl	8005050 <USB_CoreReset>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e01b      	b.n	8003aca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f001 fad6 	bl	8005050 <USB_CoreReset>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003aa8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
 8003abc:	e005      	b.n	8003aca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aca:	7fbb      	ldrb	r3, [r7, #30]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d10b      	bne.n	8003ae8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f043 0206 	orr.w	r2, r3, #6
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003af4:	b004      	add	sp, #16
 8003af6:	4770      	bx	lr

08003af8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d165      	bne.n	8003bd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4a41      	ldr	r2, [pc, #260]	; (8003c14 <USB_SetTurnaroundTime+0x11c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d906      	bls.n	8003b22 <USB_SetTurnaroundTime+0x2a>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4a40      	ldr	r2, [pc, #256]	; (8003c18 <USB_SetTurnaroundTime+0x120>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d202      	bcs.n	8003b22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b1c:	230f      	movs	r3, #15
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e062      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <USB_SetTurnaroundTime+0x120>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d306      	bcc.n	8003b38 <USB_SetTurnaroundTime+0x40>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4a3b      	ldr	r2, [pc, #236]	; (8003c1c <USB_SetTurnaroundTime+0x124>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d202      	bcs.n	8003b38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b32:	230e      	movs	r3, #14
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e057      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4a38      	ldr	r2, [pc, #224]	; (8003c1c <USB_SetTurnaroundTime+0x124>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d306      	bcc.n	8003b4e <USB_SetTurnaroundTime+0x56>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4a37      	ldr	r2, [pc, #220]	; (8003c20 <USB_SetTurnaroundTime+0x128>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d202      	bcs.n	8003b4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b48:	230d      	movs	r3, #13
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e04c      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4a33      	ldr	r2, [pc, #204]	; (8003c20 <USB_SetTurnaroundTime+0x128>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d306      	bcc.n	8003b64 <USB_SetTurnaroundTime+0x6c>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4a32      	ldr	r2, [pc, #200]	; (8003c24 <USB_SetTurnaroundTime+0x12c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d802      	bhi.n	8003b64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b5e:	230c      	movs	r3, #12
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e041      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <USB_SetTurnaroundTime+0x12c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d906      	bls.n	8003b7a <USB_SetTurnaroundTime+0x82>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4a2e      	ldr	r2, [pc, #184]	; (8003c28 <USB_SetTurnaroundTime+0x130>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d802      	bhi.n	8003b7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b74:	230b      	movs	r3, #11
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e036      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <USB_SetTurnaroundTime+0x130>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d906      	bls.n	8003b90 <USB_SetTurnaroundTime+0x98>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4a29      	ldr	r2, [pc, #164]	; (8003c2c <USB_SetTurnaroundTime+0x134>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d802      	bhi.n	8003b90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b8a:	230a      	movs	r3, #10
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e02b      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <USB_SetTurnaroundTime+0x134>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d906      	bls.n	8003ba6 <USB_SetTurnaroundTime+0xae>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <USB_SetTurnaroundTime+0x138>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d202      	bcs.n	8003ba6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ba0:	2309      	movs	r3, #9
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e020      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <USB_SetTurnaroundTime+0x138>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d306      	bcc.n	8003bbc <USB_SetTurnaroundTime+0xc4>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <USB_SetTurnaroundTime+0x13c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d802      	bhi.n	8003bbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e015      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <USB_SetTurnaroundTime+0x13c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d906      	bls.n	8003bd2 <USB_SetTurnaroundTime+0xda>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <USB_SetTurnaroundTime+0x140>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d202      	bcs.n	8003bd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bcc:	2307      	movs	r3, #7
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e00a      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003bd2:	2306      	movs	r3, #6
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e007      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003bde:	2309      	movs	r3, #9
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	e001      	b.n	8003be8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003be4:	2309      	movs	r3, #9
 8003be6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	029b      	lsls	r3, r3, #10
 8003bfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	00d8acbf 	.word	0x00d8acbf
 8003c18:	00e4e1c0 	.word	0x00e4e1c0
 8003c1c:	00f42400 	.word	0x00f42400
 8003c20:	01067380 	.word	0x01067380
 8003c24:	011a499f 	.word	0x011a499f
 8003c28:	01312cff 	.word	0x01312cff
 8003c2c:	014ca43f 	.word	0x014ca43f
 8003c30:	016e3600 	.word	0x016e3600
 8003c34:	01a6ab1f 	.word	0x01a6ab1f
 8003c38:	01e84800 	.word	0x01e84800

08003c3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0201 	bic.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d115      	bne.n	8003cce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003cae:	200a      	movs	r0, #10
 8003cb0:	f7fc fef0 	bl	8000a94 <HAL_Delay>
      ms += 10U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	330a      	adds	r3, #10
 8003cb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 f939 	bl	8004f32 <USB_GetMode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d01e      	beq.n	8003d04 <USB_SetCurrentMode+0x84>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2bc7      	cmp	r3, #199	; 0xc7
 8003cca:	d9f0      	bls.n	8003cae <USB_SetCurrentMode+0x2e>
 8003ccc:	e01a      	b.n	8003d04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d115      	bne.n	8003d00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ce0:	200a      	movs	r0, #10
 8003ce2:	f7fc fed7 	bl	8000a94 <HAL_Delay>
      ms += 10U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	330a      	adds	r3, #10
 8003cea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f001 f920 	bl	8004f32 <USB_GetMode>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <USB_SetCurrentMode+0x84>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2bc7      	cmp	r3, #199	; 0xc7
 8003cfc:	d9f0      	bls.n	8003ce0 <USB_SetCurrentMode+0x60>
 8003cfe:	e001      	b.n	8003d04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e005      	b.n	8003d10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2bc8      	cmp	r3, #200	; 0xc8
 8003d08:	d101      	bne.n	8003d0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d18:	b084      	sub	sp, #16
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	e009      	b.n	8003d4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	3340      	adds	r3, #64	; 0x40
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	2200      	movs	r2, #0
 8003d44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b0e      	cmp	r3, #14
 8003d50:	d9f2      	bls.n	8003d38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11c      	bne.n	8003d94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
 8003d92:	e00b      	b.n	8003dac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003db2:	461a      	mov	r2, r3
 8003db4:	2300      	movs	r3, #0
 8003db6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003db8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10d      	bne.n	8003ddc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003dc8:	2100      	movs	r1, #0
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f968 	bl	80040a0 <USB_SetDevSpeed>
 8003dd0:	e008      	b.n	8003de4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f963 	bl	80040a0 <USB_SetDevSpeed>
 8003dda:	e003      	b.n	8003de4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ddc:	2103      	movs	r1, #3
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f95e 	bl	80040a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003de4:	2110      	movs	r1, #16
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8fa 	bl	8003fe0 <USB_FlushTxFifo>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f924 	bl	8004044 <USB_FlushRxFifo>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2300      	movs	r3, #0
 8003e10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e24:	461a      	mov	r2, r3
 8003e26:	2300      	movs	r3, #0
 8003e28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	e043      	b.n	8003eb8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e46:	d118      	bne.n	8003e7a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e013      	b.n	8003e8c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	461a      	mov	r2, r3
 8003e72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e008      	b.n	8003e8c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e86:	461a      	mov	r2, r3
 8003e88:	2300      	movs	r3, #0
 8003e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d3b5      	bcc.n	8003e30 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e043      	b.n	8003f52 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee0:	d118      	bne.n	8003f14 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	e013      	b.n	8003f26 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e008      	b.n	8003f26 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f20:	461a      	mov	r2, r3
 8003f22:	2300      	movs	r3, #0
 8003f24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	461a      	mov	r2, r3
 8003f34:	2300      	movs	r3, #0
 8003f36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	461a      	mov	r2, r3
 8003f46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f56:	461a      	mov	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d3b5      	bcc.n	8003eca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f043 0210 	orr.w	r2, r3, #16
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <USB_DevInit+0x2c4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fa0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f043 0208 	orr.w	r2, r3, #8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd8:	b004      	add	sp, #16
 8003fda:	4770      	bx	lr
 8003fdc:	803c3800 	.word	0x803c3800

08003fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ffa:	d901      	bls.n	8004000 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e01b      	b.n	8004038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	daf2      	bge.n	8003fee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	019b      	lsls	r3, r3, #6
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3301      	adds	r3, #1
 800401c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004024:	d901      	bls.n	800402a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e006      	b.n	8004038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b20      	cmp	r3, #32
 8004034:	d0f0      	beq.n	8004018 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3301      	adds	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800405c:	d901      	bls.n	8004062 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e018      	b.n	8004094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	daf2      	bge.n	8004050 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2210      	movs	r2, #16
 8004072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004080:	d901      	bls.n	8004086 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e006      	b.n	8004094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b10      	cmp	r3, #16
 8004090:	d0f0      	beq.n	8004074 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b087      	sub	sp, #28
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0306 	and.w	r3, r3, #6
 80040ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
 80040f6:	e00a      	b.n	800410e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d002      	beq.n	8004104 <USB_GetDevSpeed+0x32>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d102      	bne.n	800410a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004104:	2302      	movs	r3, #2
 8004106:	75fb      	strb	r3, [r7, #23]
 8004108:	e001      	b.n	800410e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800410a:	230f      	movs	r3, #15
 800410c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d13a      	bne.n	80041ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2101      	movs	r1, #1
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	b29b      	uxth	r3, r3
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004156:	4313      	orrs	r3, r2
 8004158:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d155      	bne.n	800421c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	791b      	ldrb	r3, [r3, #4]
 800418a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800418c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	059b      	lsls	r3, r3, #22
 8004192:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004194:	4313      	orrs	r3, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	0151      	lsls	r1, r2, #5
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	440a      	add	r2, r1
 800419e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	e036      	b.n	800421c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b4:	69da      	ldr	r2, [r3, #28]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11a      	bne.n	800421c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004202:	430b      	orrs	r3, r1
 8004204:	4313      	orrs	r3, r2
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	440a      	add	r2, r1
 800420e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d161      	bne.n	800430c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800425a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800425e:	d11f      	bne.n	80042a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	0151      	lsls	r1, r2, #5
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	440a      	add	r2, r1
 8004276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800427e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	0151      	lsls	r1, r2, #5
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	440a      	add	r2, r1
 8004296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800429e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c0:	4013      	ands	r3, r2
 80042c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	2101      	movs	r1, #1
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	b29b      	uxth	r3, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	68f9      	ldr	r1, [r7, #12]
 80042e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e4:	4013      	ands	r3, r2
 80042e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	0159      	lsls	r1, r3, #5
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	440b      	add	r3, r1
 80042fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004302:	4619      	mov	r1, r3
 8004304:	4b35      	ldr	r3, [pc, #212]	; (80043dc <USB_DeactivateEndpoint+0x1b0>)
 8004306:	4013      	ands	r3, r2
 8004308:	600b      	str	r3, [r1, #0]
 800430a:	e060      	b.n	80043ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800431e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004322:	d11f      	bne.n	8004364 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	440a      	add	r2, r1
 800433a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004342:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	440a      	add	r2, r1
 800435a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	43db      	mvns	r3, r3
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004384:	4013      	ands	r3, r2
 8004386:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	2101      	movs	r1, #1
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	43db      	mvns	r3, r3
 80043a2:	68f9      	ldr	r1, [r7, #12]
 80043a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a8:	4013      	ands	r3, r2
 80043aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	0159      	lsls	r1, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	440b      	add	r3, r1
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	4619      	mov	r1, r3
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <USB_DeactivateEndpoint+0x1b4>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	ec337800 	.word	0xec337800
 80043e0:	eff37800 	.word	0xeff37800

080043e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 817a 	bne.w	80046fa <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d132      	bne.n	8004474 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	0151      	lsls	r1, r2, #5
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	440a      	add	r2, r1
 8004424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800442c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446c:	0cdb      	lsrs	r3, r3, #19
 800446e:	04db      	lsls	r3, r3, #19
 8004470:	6113      	str	r3, [r2, #16]
 8004472:	e092      	b.n	800459a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	0151      	lsls	r1, r2, #5
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	440a      	add	r2, r1
 800448a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448e:	0cdb      	lsrs	r3, r3, #19
 8004490:	04db      	lsls	r3, r3, #19
 8004492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11a      	bne.n	80044f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d903      	bls.n	80044d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	0151      	lsls	r1, r2, #5
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	440a      	add	r2, r1
 80044e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044f0:	6113      	str	r3, [r2, #16]
 80044f2:	e01b      	b.n	800452c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6919      	ldr	r1, [r3, #16]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	440b      	add	r3, r1
 800450c:	1e59      	subs	r1, r3, #1
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	fbb1 f3f3 	udiv	r3, r1, r3
 8004516:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004518:	4ba2      	ldr	r3, [pc, #648]	; (80047a4 <USB_EPStartXfer+0x3c0>)
 800451a:	400b      	ands	r3, r1
 800451c:	69b9      	ldr	r1, [r7, #24]
 800451e:	0148      	lsls	r0, r1, #5
 8004520:	69f9      	ldr	r1, [r7, #28]
 8004522:	4401      	add	r1, r0
 8004524:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004528:	4313      	orrs	r3, r2
 800452a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004542:	69b9      	ldr	r1, [r7, #24]
 8004544:	0148      	lsls	r0, r1, #5
 8004546:	69f9      	ldr	r1, [r7, #28]
 8004548:	4401      	add	r1, r0
 800454a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800454e:	4313      	orrs	r3, r2
 8004550:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	791b      	ldrb	r3, [r3, #4]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d11f      	bne.n	800459a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004574:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004578:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	0151      	lsls	r1, r2, #5
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	440a      	add	r2, r1
 8004590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004594:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004598:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d14b      	bne.n	8004638 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	461a      	mov	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	791b      	ldrb	r3, [r3, #4]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d128      	bne.n	8004616 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d110      	bne.n	80045f6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e00f      	b.n	8004616 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	0151      	lsls	r1, r2, #5
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	440a      	add	r2, r1
 800462c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004630:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e165      	b.n	8004904 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	0151      	lsls	r1, r2, #5
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	440a      	add	r2, r1
 800464e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004652:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004656:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	791b      	ldrb	r3, [r3, #4]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d015      	beq.n	800468c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 814d 	beq.w	8004904 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	2101      	movs	r1, #1
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	69f9      	ldr	r1, [r7, #28]
 8004682:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004686:	4313      	orrs	r3, r2
 8004688:	634b      	str	r3, [r1, #52]	; 0x34
 800468a:	e13b      	b.n	8004904 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d110      	bne.n	80046be <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e00f      	b.n	80046de <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	68d9      	ldr	r1, [r3, #12]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	b298      	uxth	r0, r3
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4603      	mov	r3, r0
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f9b8 	bl	8004a68 <USB_WritePacket>
 80046f8:	e104      	b.n	8004904 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004714:	0cdb      	lsrs	r3, r3, #19
 8004716:	04db      	lsls	r3, r3, #19
 8004718:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004734:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004738:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800473c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d131      	bne.n	80047a8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004772:	69b9      	ldr	r1, [r7, #24]
 8004774:	0148      	lsls	r0, r1, #5
 8004776:	69f9      	ldr	r1, [r7, #28]
 8004778:	4401      	add	r1, r0
 800477a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800477e:	4313      	orrs	r3, r2
 8004780:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800479c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047a0:	6113      	str	r3, [r2, #16]
 80047a2:	e061      	b.n	8004868 <USB_EPStartXfer+0x484>
 80047a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d123      	bne.n	80047f8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c6:	69b9      	ldr	r1, [r7, #24]
 80047c8:	0148      	lsls	r0, r1, #5
 80047ca:	69f9      	ldr	r1, [r7, #28]
 80047cc:	4401      	add	r1, r0
 80047ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047d2:	4313      	orrs	r3, r2
 80047d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047f4:	6113      	str	r3, [r2, #16]
 80047f6:	e037      	b.n	8004868 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4413      	add	r3, r2
 8004802:	1e5a      	subs	r2, r3, #1
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	8afa      	ldrh	r2, [r7, #22]
 8004814:	fb03 f202 	mul.w	r2, r3, r2
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	8afb      	ldrh	r3, [r7, #22]
 800482c:	04d9      	lsls	r1, r3, #19
 800482e:	4b38      	ldr	r3, [pc, #224]	; (8004910 <USB_EPStartXfer+0x52c>)
 8004830:	400b      	ands	r3, r1
 8004832:	69b9      	ldr	r1, [r7, #24]
 8004834:	0148      	lsls	r0, r1, #5
 8004836:	69f9      	ldr	r1, [r7, #28]
 8004838:	4401      	add	r1, r0
 800483a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800483e:	4313      	orrs	r3, r2
 8004840:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004858:	69b9      	ldr	r1, [r7, #24]
 800485a:	0148      	lsls	r0, r1, #5
 800485c:	69f9      	ldr	r1, [r7, #28]
 800485e:	4401      	add	r1, r0
 8004860:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004864:	4313      	orrs	r3, r2
 8004866:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10d      	bne.n	800488a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	68d9      	ldr	r1, [r3, #12]
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004886:	460a      	mov	r2, r1
 8004888:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	791b      	ldrb	r3, [r3, #4]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d128      	bne.n	80048e4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d110      	bne.n	80048c4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	0151      	lsls	r1, r2, #5
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	440a      	add	r2, r1
 80048b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e00f      	b.n	80048e4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	0151      	lsls	r1, r2, #5
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	440a      	add	r2, r1
 80048fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004902:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	1ff80000 	.word	0x1ff80000

08004914 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d14a      	bne.n	80049c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800494a:	f040 8086 	bne.w	8004a5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004970:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004994:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3301      	adds	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f242 7210 	movw	r2, #10000	; 0x2710
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d902      	bls.n	80049ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
          break;
 80049aa:	e056      	b.n	8004a5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c4:	d0e7      	beq.n	8004996 <USB_EPStopXfer+0x82>
 80049c6:	e048      	b.n	8004a5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e0:	d13b      	bne.n	8004a5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	7812      	ldrb	r2, [r2, #0]
 80049f6:	0151      	lsls	r1, r2, #5
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	440a      	add	r2, r1
 80049fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d902      	bls.n	8004a40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a3e:	e00c      	b.n	8004a5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a58:	d0e7      	beq.n	8004a2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	4611      	mov	r1, r2
 8004a74:	461a      	mov	r2, r3
 8004a76:	460b      	mov	r3, r1
 8004a78:	71fb      	strb	r3, [r7, #7]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d123      	bne.n	8004ad6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a8e:	88bb      	ldrh	r3, [r7, #4]
 8004a90:	3303      	adds	r3, #3
 8004a92:	089b      	lsrs	r3, r3, #2
 8004a94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e018      	b.n	8004ace <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	031a      	lsls	r2, r3, #12
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	3301      	adds	r3, #1
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d3e2      	bcc.n	8004a9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3724      	adds	r7, #36	; 0x24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b08b      	sub	sp, #44	; 0x2c
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	623b      	str	r3, [r7, #32]
 8004b0e:	e014      	b.n	8004b3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	3301      	adds	r3, #1
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	3301      	adds	r3, #1
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	3301      	adds	r3, #1
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	3301      	adds	r3, #1
 8004b38:	623b      	str	r3, [r7, #32]
 8004b3a:	6a3a      	ldr	r2, [r7, #32]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d3e6      	bcc.n	8004b10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b42:	8bfb      	ldrh	r3, [r7, #30]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01e      	beq.n	8004b86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b52:	461a      	mov	r2, r3
 8004b54:	f107 0310 	add.w	r3, r7, #16
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	701a      	strb	r2, [r3, #0]
      i++;
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	3301      	adds	r3, #1
 8004b72:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	3301      	adds	r3, #1
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b7a:	8bfb      	ldrh	r3, [r7, #30]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b80:	8bfb      	ldrh	r3, [r7, #30]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ea      	bne.n	8004b5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	372c      	adds	r7, #44	; 0x2c
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d12c      	bne.n	8004c0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	db12      	blt.n	8004be8 <USB_EPSetStall+0x54>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00f      	beq.n	8004be8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004be6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e02b      	b.n	8004c62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db12      	blt.n	8004c42 <USB_EPSetStall+0xae>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00f      	beq.n	8004c42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	785b      	ldrb	r3, [r3, #1]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d128      	bne.n	8004cde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004caa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	791b      	ldrb	r3, [r3, #4]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d003      	beq.n	8004cbc <USB_EPClearStall+0x4c>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	791b      	ldrb	r3, [r3, #4]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d138      	bne.n	8004d2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	0151      	lsls	r1, r2, #5
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	440a      	add	r2, r1
 8004cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	e027      	b.n	8004d2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	791b      	ldrb	r3, [r3, #4]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d003      	beq.n	8004d0e <USB_EPClearStall+0x9e>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	791b      	ldrb	r3, [r3, #4]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d10f      	bne.n	8004d2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d70:	68f9      	ldr	r1, [r7, #12]
 8004d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d76:	4313      	orrs	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db6:	f023 0302 	bic.w	r3, r3, #2
 8004dba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004de4:	f023 0303 	bic.w	r3, r3, #3
 8004de8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df8:	f043 0302 	orr.w	r3, r3, #2
 8004dfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4013      	ands	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b085      	sub	sp, #20
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	4013      	ands	r3, r2
 8004e54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	0c1b      	lsrs	r3, r3, #16
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	b29b      	uxth	r3, r3
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b087      	sub	sp, #28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	fa22 f303 	lsr.w	r3, r2, r3
 8004f06:	01db      	lsls	r3, r3, #7
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4013      	ands	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f24:	68bb      	ldr	r3, [r7, #8]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f6c:	f023 0307 	bic.w	r3, r3, #7
 8004f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	333c      	adds	r3, #60	; 0x3c
 8004faa:	3304      	adds	r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4a26      	ldr	r2, [pc, #152]	; (800504c <USB_EP0_OutStart+0xb8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d90a      	bls.n	8004fce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc8:	d101      	bne.n	8004fce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e037      	b.n	800503e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffc:	f043 0318 	orr.w	r3, r3, #24
 8005000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005010:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005014:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005016:	7afb      	ldrb	r3, [r7, #11]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d10f      	bne.n	800503c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	461a      	mov	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005036:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800503a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	4f54300a 	.word	0x4f54300a

08005050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3301      	adds	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005068:	d901      	bls.n	800506e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e01b      	b.n	80050a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	daf2      	bge.n	800505c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f043 0201 	orr.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005092:	d901      	bls.n	8005098 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e006      	b.n	80050a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d0f0      	beq.n	8005086 <USB_CoreReset+0x36>

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80050c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80050c4:	f002 fc24 	bl	8007910 <USBD_static_malloc>
 80050c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	32b0      	adds	r2, #176	; 0xb0
 80050da:	2100      	movs	r1, #0
 80050dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80050e0:	2302      	movs	r3, #2
 80050e2:	e0d4      	b.n	800528e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80050e4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80050e8:	2100      	movs	r1, #0
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f002 fc54 	bl	8007998 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	32b0      	adds	r2, #176	; 0xb0
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	32b0      	adds	r2, #176	; 0xb0
 800510a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	7c1b      	ldrb	r3, [r3, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d138      	bne.n	800518e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800511c:	4b5e      	ldr	r3, [pc, #376]	; (8005298 <USBD_CDC_Init+0x1e4>)
 800511e:	7819      	ldrb	r1, [r3, #0]
 8005120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005124:	2202      	movs	r2, #2
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f002 facf 	bl	80076ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800512c:	4b5a      	ldr	r3, [pc, #360]	; (8005298 <USBD_CDC_Init+0x1e4>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	f003 020f 	and.w	r2, r3, #15
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3324      	adds	r3, #36	; 0x24
 8005142:	2201      	movs	r2, #1
 8005144:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005146:	4b55      	ldr	r3, [pc, #340]	; (800529c <USBD_CDC_Init+0x1e8>)
 8005148:	7819      	ldrb	r1, [r3, #0]
 800514a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800514e:	2202      	movs	r2, #2
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f002 faba 	bl	80076ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005156:	4b51      	ldr	r3, [pc, #324]	; (800529c <USBD_CDC_Init+0x1e8>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	f003 020f 	and.w	r2, r3, #15
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800516e:	2201      	movs	r2, #1
 8005170:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005172:	4b4b      	ldr	r3, [pc, #300]	; (80052a0 <USBD_CDC_Init+0x1ec>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	f003 020f 	and.w	r2, r3, #15
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	3326      	adds	r3, #38	; 0x26
 8005188:	2210      	movs	r2, #16
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	e035      	b.n	80051fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800518e:	4b42      	ldr	r3, [pc, #264]	; (8005298 <USBD_CDC_Init+0x1e4>)
 8005190:	7819      	ldrb	r1, [r3, #0]
 8005192:	2340      	movs	r3, #64	; 0x40
 8005194:	2202      	movs	r2, #2
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f002 fa97 	bl	80076ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800519c:	4b3e      	ldr	r3, [pc, #248]	; (8005298 <USBD_CDC_Init+0x1e4>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f003 020f 	and.w	r2, r3, #15
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3324      	adds	r3, #36	; 0x24
 80051b2:	2201      	movs	r2, #1
 80051b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051b6:	4b39      	ldr	r3, [pc, #228]	; (800529c <USBD_CDC_Init+0x1e8>)
 80051b8:	7819      	ldrb	r1, [r3, #0]
 80051ba:	2340      	movs	r3, #64	; 0x40
 80051bc:	2202      	movs	r2, #2
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f002 fa83 	bl	80076ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051c4:	4b35      	ldr	r3, [pc, #212]	; (800529c <USBD_CDC_Init+0x1e8>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f003 020f 	and.w	r2, r3, #15
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	440b      	add	r3, r1
 80051d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051dc:	2201      	movs	r2, #1
 80051de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <USBD_CDC_Init+0x1ec>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	f003 020f 	and.w	r2, r3, #15
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3326      	adds	r3, #38	; 0x26
 80051f6:	2210      	movs	r2, #16
 80051f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80051fa:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <USBD_CDC_Init+0x1ec>)
 80051fc:	7819      	ldrb	r1, [r3, #0]
 80051fe:	2308      	movs	r3, #8
 8005200:	2203      	movs	r2, #3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f002 fa61 	bl	80076ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <USBD_CDC_Init+0x1ec>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	f003 020f 	and.w	r2, r3, #15
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	3324      	adds	r3, #36	; 0x24
 800521e:	2201      	movs	r2, #1
 8005220:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	33b0      	adds	r3, #176	; 0xb0
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005258:	2302      	movs	r3, #2
 800525a:	e018      	b.n	800528e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	7c1b      	ldrb	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <USBD_CDC_Init+0x1e8>)
 8005266:	7819      	ldrb	r1, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800526e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f002 fb18 	bl	80078a8 <USBD_LL_PrepareReceive>
 8005278:	e008      	b.n	800528c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <USBD_CDC_Init+0x1e8>)
 800527c:	7819      	ldrb	r1, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005284:	2340      	movs	r3, #64	; 0x40
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f002 fb0e 	bl	80078a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000093 	.word	0x20000093
 800529c:	20000094 	.word	0x20000094
 80052a0:	20000095 	.word	0x20000095

080052a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80052b0:	4b3a      	ldr	r3, [pc, #232]	; (800539c <USBD_CDC_DeInit+0xf8>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f002 fa2d 	bl	8007716 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80052bc:	4b37      	ldr	r3, [pc, #220]	; (800539c <USBD_CDC_DeInit+0xf8>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	3324      	adds	r3, #36	; 0x24
 80052d2:	2200      	movs	r2, #0
 80052d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80052d6:	4b32      	ldr	r3, [pc, #200]	; (80053a0 <USBD_CDC_DeInit+0xfc>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f002 fa1a 	bl	8007716 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80052e2:	4b2f      	ldr	r3, [pc, #188]	; (80053a0 <USBD_CDC_DeInit+0xfc>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	f003 020f 	and.w	r2, r3, #15
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052fa:	2200      	movs	r2, #0
 80052fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <USBD_CDC_DeInit+0x100>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	4619      	mov	r1, r3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f002 fa06 	bl	8007716 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800530a:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <USBD_CDC_DeInit+0x100>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	f003 020f 	and.w	r2, r3, #15
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	2200      	movs	r2, #0
 8005322:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005324:	4b1f      	ldr	r3, [pc, #124]	; (80053a4 <USBD_CDC_DeInit+0x100>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3326      	adds	r3, #38	; 0x26
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	32b0      	adds	r2, #176	; 0xb0
 8005348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01f      	beq.n	8005390 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	33b0      	adds	r3, #176	; 0xb0
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	32b0      	adds	r2, #176	; 0xb0
 800536e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005372:	4618      	mov	r0, r3
 8005374:	f002 fada 	bl	800792c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	32b0      	adds	r2, #176	; 0xb0
 8005382:	2100      	movs	r1, #0
 8005384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000093 	.word	0x20000093
 80053a0:	20000094 	.word	0x20000094
 80053a4:	20000095 	.word	0x20000095

080053a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	32b0      	adds	r2, #176	; 0xb0
 80053bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e0bf      	b.n	8005558 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d050      	beq.n	8005486 <USBD_CDC_Setup+0xde>
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	f040 80af 	bne.w	8005548 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	88db      	ldrh	r3, [r3, #6]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d03a      	beq.n	8005468 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	b25b      	sxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	da1b      	bge.n	8005434 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	33b0      	adds	r3, #176	; 0xb0
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005412:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	88d2      	ldrh	r2, [r2, #6]
 8005418:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	88db      	ldrh	r3, [r3, #6]
 800541e:	2b07      	cmp	r3, #7
 8005420:	bf28      	it	cs
 8005422:	2307      	movcs	r3, #7
 8005424:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	89fa      	ldrh	r2, [r7, #14]
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 fd49 	bl	8006ec4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005432:	e090      	b.n	8005556 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785a      	ldrb	r2, [r3, #1]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	88db      	ldrh	r3, [r3, #6]
 8005442:	2b3f      	cmp	r3, #63	; 0x3f
 8005444:	d803      	bhi.n	800544e <USBD_CDC_Setup+0xa6>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	88db      	ldrh	r3, [r3, #6]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	e000      	b.n	8005450 <USBD_CDC_Setup+0xa8>
 800544e:	2240      	movs	r2, #64	; 0x40
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005456:	6939      	ldr	r1, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800545e:	461a      	mov	r2, r3
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f001 fd5b 	bl	8006f1c <USBD_CtlPrepareRx>
      break;
 8005466:	e076      	b.n	8005556 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	33b0      	adds	r3, #176	; 0xb0
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	7850      	ldrb	r0, [r2, #1]
 800547e:	2200      	movs	r2, #0
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	4798      	blx	r3
      break;
 8005484:	e067      	b.n	8005556 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b0b      	cmp	r3, #11
 800548c:	d851      	bhi.n	8005532 <USBD_CDC_Setup+0x18a>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <USBD_CDC_Setup+0xec>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054c5 	.word	0x080054c5
 8005498:	08005541 	.word	0x08005541
 800549c:	08005533 	.word	0x08005533
 80054a0:	08005533 	.word	0x08005533
 80054a4:	08005533 	.word	0x08005533
 80054a8:	08005533 	.word	0x08005533
 80054ac:	08005533 	.word	0x08005533
 80054b0:	08005533 	.word	0x08005533
 80054b4:	08005533 	.word	0x08005533
 80054b8:	08005533 	.word	0x08005533
 80054bc:	080054ef 	.word	0x080054ef
 80054c0:	08005519 	.word	0x08005519
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d107      	bne.n	80054e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054d0:	f107 030a 	add.w	r3, r7, #10
 80054d4:	2202      	movs	r2, #2
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 fcf3 	bl	8006ec4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054de:	e032      	b.n	8005546 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80054e0:	6839      	ldr	r1, [r7, #0]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 fc7d 	bl	8006de2 <USBD_CtlError>
            ret = USBD_FAIL;
 80054e8:	2303      	movs	r3, #3
 80054ea:	75fb      	strb	r3, [r7, #23]
          break;
 80054ec:	e02b      	b.n	8005546 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d107      	bne.n	800550a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054fa:	f107 030d 	add.w	r3, r7, #13
 80054fe:	2201      	movs	r2, #1
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f001 fcde 	bl	8006ec4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005508:	e01d      	b.n	8005546 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800550a:	6839      	ldr	r1, [r7, #0]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 fc68 	bl	8006de2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005512:	2303      	movs	r3, #3
 8005514:	75fb      	strb	r3, [r7, #23]
          break;
 8005516:	e016      	b.n	8005546 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b03      	cmp	r3, #3
 8005522:	d00f      	beq.n	8005544 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 fc5b 	bl	8006de2 <USBD_CtlError>
            ret = USBD_FAIL;
 800552c:	2303      	movs	r3, #3
 800552e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005530:	e008      	b.n	8005544 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fc54 	bl	8006de2 <USBD_CtlError>
          ret = USBD_FAIL;
 800553a:	2303      	movs	r3, #3
 800553c:	75fb      	strb	r3, [r7, #23]
          break;
 800553e:	e002      	b.n	8005546 <USBD_CDC_Setup+0x19e>
          break;
 8005540:	bf00      	nop
 8005542:	e008      	b.n	8005556 <USBD_CDC_Setup+0x1ae>
          break;
 8005544:	bf00      	nop
      }
      break;
 8005546:	e006      	b.n	8005556 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f001 fc49 	bl	8006de2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005550:	2303      	movs	r3, #3
 8005552:	75fb      	strb	r3, [r7, #23]
      break;
 8005554:	bf00      	nop
  }

  return (uint8_t)ret;
 8005556:	7dfb      	ldrb	r3, [r7, #23]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005572:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	32b0      	adds	r2, #176	; 0xb0
 800557e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005586:	2303      	movs	r3, #3
 8005588:	e065      	b.n	8005656 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	32b0      	adds	r2, #176	; 0xb0
 8005594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005598:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	f003 020f 	and.w	r2, r3, #15
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	3318      	adds	r3, #24
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d02f      	beq.n	8005614 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 020f 	and.w	r2, r3, #15
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	3318      	adds	r3, #24
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	f003 010f 	and.w	r1, r3, #15
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	460b      	mov	r3, r1
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	440b      	add	r3, r1
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4403      	add	r3, r0
 80055dc:	331c      	adds	r3, #28
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d112      	bne.n	8005614 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	3318      	adds	r3, #24
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005606:	78f9      	ldrb	r1, [r7, #3]
 8005608:	2300      	movs	r3, #0
 800560a:	2200      	movs	r2, #0
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f002 f92a 	bl	8007866 <USBD_LL_Transmit>
 8005612:	e01f      	b.n	8005654 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	33b0      	adds	r3, #176	; 0xb0
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d010      	beq.n	8005654 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	33b0      	adds	r3, #176	; 0xb0
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	32b0      	adds	r2, #176	; 0xb0
 8005674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005678:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	32b0      	adds	r2, #176	; 0xb0
 8005684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800568c:	2303      	movs	r3, #3
 800568e:	e01a      	b.n	80056c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f002 f928 	bl	80078ea <USBD_LL_GetRxDataSize>
 800569a:	4602      	mov	r2, r0
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	33b0      	adds	r3, #176	; 0xb0
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80056c0:	4611      	mov	r1, r2
 80056c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	32b0      	adds	r2, #176	; 0xb0
 80056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e025      	b.n	800573c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	33b0      	adds	r3, #176	; 0xb0
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01a      	beq.n	800573a <USBD_CDC_EP0_RxReady+0x6c>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800570a:	2bff      	cmp	r3, #255	; 0xff
 800570c:	d015      	beq.n	800573a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	33b0      	adds	r3, #176	; 0xb0
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005726:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800572e:	b292      	uxth	r2, r2
 8005730:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	22ff      	movs	r2, #255	; 0xff
 8005736:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800574c:	2182      	movs	r1, #130	; 0x82
 800574e:	4818      	ldr	r0, [pc, #96]	; (80057b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005750:	f000 fd0f 	bl	8006172 <USBD_GetEpDesc>
 8005754:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005756:	2101      	movs	r1, #1
 8005758:	4815      	ldr	r0, [pc, #84]	; (80057b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800575a:	f000 fd0a 	bl	8006172 <USBD_GetEpDesc>
 800575e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005760:	2181      	movs	r1, #129	; 0x81
 8005762:	4813      	ldr	r0, [pc, #76]	; (80057b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005764:	f000 fd05 	bl	8006172 <USBD_GetEpDesc>
 8005768:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2210      	movs	r2, #16
 8005774:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2200      	movs	r2, #0
 8005780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005784:	711a      	strb	r2, [r3, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d006      	beq.n	800579e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005798:	711a      	strb	r2, [r3, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2243      	movs	r2, #67	; 0x43
 80057a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000050 	.word	0x20000050

080057b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057bc:	2182      	movs	r1, #130	; 0x82
 80057be:	4818      	ldr	r0, [pc, #96]	; (8005820 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057c0:	f000 fcd7 	bl	8006172 <USBD_GetEpDesc>
 80057c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057c6:	2101      	movs	r1, #1
 80057c8:	4815      	ldr	r0, [pc, #84]	; (8005820 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057ca:	f000 fcd2 	bl	8006172 <USBD_GetEpDesc>
 80057ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057d0:	2181      	movs	r1, #129	; 0x81
 80057d2:	4813      	ldr	r0, [pc, #76]	; (8005820 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80057d4:	f000 fccd 	bl	8006172 <USBD_GetEpDesc>
 80057d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2210      	movs	r2, #16
 80057e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d006      	beq.n	80057fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2200      	movs	r2, #0
 80057f0:	711a      	strb	r2, [r3, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f042 0202 	orr.w	r2, r2, #2
 80057f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d006      	beq.n	800580e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	711a      	strb	r2, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f042 0202 	orr.w	r2, r2, #2
 800580c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2243      	movs	r2, #67	; 0x43
 8005812:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005814:	4b02      	ldr	r3, [pc, #8]	; (8005820 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000050 	.word	0x20000050

08005824 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800582c:	2182      	movs	r1, #130	; 0x82
 800582e:	4818      	ldr	r0, [pc, #96]	; (8005890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005830:	f000 fc9f 	bl	8006172 <USBD_GetEpDesc>
 8005834:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005836:	2101      	movs	r1, #1
 8005838:	4815      	ldr	r0, [pc, #84]	; (8005890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800583a:	f000 fc9a 	bl	8006172 <USBD_GetEpDesc>
 800583e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005840:	2181      	movs	r1, #129	; 0x81
 8005842:	4813      	ldr	r0, [pc, #76]	; (8005890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005844:	f000 fc95 	bl	8006172 <USBD_GetEpDesc>
 8005848:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2210      	movs	r2, #16
 8005854:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d006      	beq.n	800586a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2200      	movs	r2, #0
 8005860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005864:	711a      	strb	r2, [r3, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005878:	711a      	strb	r2, [r3, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2243      	movs	r2, #67	; 0x43
 8005882:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005884:	4b02      	ldr	r3, [pc, #8]	; (8005890 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000050 	.word	0x20000050

08005894 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	220a      	movs	r2, #10
 80058a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80058a2:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	2000000c 	.word	0x2000000c

080058b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e009      	b.n	80058dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	33b0      	adds	r3, #176	; 0xb0
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	32b0      	adds	r2, #176	; 0xb0
 80058fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005902:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800590a:	2303      	movs	r3, #3
 800590c:	e008      	b.n	8005920 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	32b0      	adds	r2, #176	; 0xb0
 8005940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005944:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800594c:	2303      	movs	r3, #3
 800594e:	e004      	b.n	800595a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	32b0      	adds	r2, #176	; 0xb0
 800597a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	32b0      	adds	r2, #176	; 0xb0
 800598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005992:	2303      	movs	r3, #3
 8005994:	e018      	b.n	80059c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	7c1b      	ldrb	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <USBD_CDC_ReceivePacket+0x68>)
 80059a0:	7819      	ldrb	r1, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 ff7b 	bl	80078a8 <USBD_LL_PrepareReceive>
 80059b2:	e008      	b.n	80059c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <USBD_CDC_ReceivePacket+0x68>)
 80059b6:	7819      	ldrb	r1, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059be:	2340      	movs	r3, #64	; 0x40
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 ff71 	bl	80078a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000094 	.word	0x20000094

080059d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e01f      	b.n	8005a2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	79fa      	ldrb	r2, [r7, #7]
 8005a1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f001 fdeb 	bl	80075fc <USBD_LL_Init>
 8005a26:	4603      	mov	r3, r0
 8005a28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e025      	b.n	8005a98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	32ae      	adds	r2, #174	; 0xae
 8005a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00f      	beq.n	8005a88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	32ae      	adds	r2, #174	; 0xae
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f107 020e 	add.w	r2, r7, #14
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4798      	blx	r3
 8005a80:	4602      	mov	r2, r0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 fdf3 	bl	8007694 <USBD_LL_Start>
 8005aae:	4603      	mov	r3, r0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ac0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d009      	beq.n	8005afc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	4611      	mov	r1, r2
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
 8005af8:	4603      	mov	r3, r0
 8005afa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	4611      	mov	r1, r2
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 f90e 	bl	8006d6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d01a      	beq.n	8005bac <USBD_LL_SetupStage+0x72>
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d822      	bhi.n	8005bc0 <USBD_LL_SetupStage+0x86>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <USBD_LL_SetupStage+0x4a>
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d00a      	beq.n	8005b98 <USBD_LL_SetupStage+0x5e>
 8005b82:	e01d      	b.n	8005bc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb65 	bl	800625c <USBD_StdDevReq>
 8005b92:	4603      	mov	r3, r0
 8005b94:	73fb      	strb	r3, [r7, #15]
      break;
 8005b96:	e020      	b.n	8005bda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fbcd 	bl	8006340 <USBD_StdItfReq>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8005baa:	e016      	b.n	8005bda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fc2f 	bl	8006418 <USBD_StdEPReq>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005bbe:	e00c      	b.n	8005bda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fdc0 	bl	8007754 <USBD_LL_StallEP>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd8:	bf00      	nop
  }

  return ret;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	460b      	mov	r3, r1
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d16e      	bne.n	8005cda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	f040 8098 	bne.w	8005d40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d913      	bls.n	8005c44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	1ad2      	subs	r2, r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	4293      	cmp	r3, r2
 8005c34:	bf28      	it	cs
 8005c36:	4613      	movcs	r3, r2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f001 f98a 	bl	8006f56 <USBD_CtlContinueRx>
 8005c42:	e07d      	b.n	8005d40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d014      	beq.n	8005c7c <USBD_LL_DataOutStage+0x98>
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d81d      	bhi.n	8005c92 <USBD_LL_DataOutStage+0xae>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <USBD_LL_DataOutStage+0x7c>
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d003      	beq.n	8005c66 <USBD_LL_DataOutStage+0x82>
 8005c5e:	e018      	b.n	8005c92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	75bb      	strb	r3, [r7, #22]
            break;
 8005c64:	e018      	b.n	8005c98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fa64 	bl	800613e <USBD_CoreFindIF>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75bb      	strb	r3, [r7, #22]
            break;
 8005c7a:	e00d      	b.n	8005c98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	4619      	mov	r1, r3
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fa66 	bl	8006158 <USBD_CoreFindEP>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	75bb      	strb	r3, [r7, #22]
            break;
 8005c90:	e002      	b.n	8005c98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75bb      	strb	r3, [r7, #22]
            break;
 8005c96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005c98:	7dbb      	ldrb	r3, [r7, #22]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d119      	bne.n	8005cd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d113      	bne.n	8005cd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005caa:	7dba      	ldrb	r2, [r7, #22]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	32ae      	adds	r2, #174	; 0xae
 8005cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005cba:	7dba      	ldrb	r2, [r7, #22]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005cc2:	7dba      	ldrb	r2, [r7, #22]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	32ae      	adds	r2, #174	; 0xae
 8005cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f001 f950 	bl	8006f78 <USBD_CtlSendStatus>
 8005cd8:	e032      	b.n	8005d40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005cda:	7afb      	ldrb	r3, [r7, #11]
 8005cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fa37 	bl	8006158 <USBD_CoreFindEP>
 8005cea:	4603      	mov	r3, r0
 8005cec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cee:	7dbb      	ldrb	r3, [r7, #22]
 8005cf0:	2bff      	cmp	r3, #255	; 0xff
 8005cf2:	d025      	beq.n	8005d40 <USBD_LL_DataOutStage+0x15c>
 8005cf4:	7dbb      	ldrb	r3, [r7, #22]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d122      	bne.n	8005d40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d117      	bne.n	8005d36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d06:	7dba      	ldrb	r2, [r7, #22]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	32ae      	adds	r2, #174	; 0xae
 8005d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00f      	beq.n	8005d36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d16:	7dba      	ldrb	r2, [r7, #22]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d1e:	7dba      	ldrb	r2, [r7, #22]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	32ae      	adds	r2, #174	; 0xae
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	7afa      	ldrb	r2, [r7, #11]
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	4798      	blx	r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	e000      	b.n	8005d42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	460b      	mov	r3, r1
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005d58:	7afb      	ldrb	r3, [r7, #11]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d16f      	bne.n	8005e3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3314      	adds	r3, #20
 8005d62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d15a      	bne.n	8005e24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d914      	bls.n	8005da4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	1ad2      	subs	r2, r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f001 f8b2 	bl	8006efa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d96:	2300      	movs	r3, #0
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f001 fd83 	bl	80078a8 <USBD_LL_PrepareReceive>
 8005da2:	e03f      	b.n	8005e24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d11c      	bne.n	8005dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d316      	bcc.n	8005dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d20f      	bcs.n	8005dea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2100      	movs	r1, #0
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f001 f893 	bl	8006efa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2200      	movs	r2, #0
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f001 fd60 	bl	80078a8 <USBD_LL_PrepareReceive>
 8005de8:	e01c      	b.n	8005e24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d10f      	bne.n	8005e16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f001 fc9b 	bl	8007754 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f001 f8bd 	bl	8006f9e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d03a      	beq.n	8005ea4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff fe42 	bl	8005ab8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e3c:	e032      	b.n	8005ea4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	4619      	mov	r1, r3
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f985 	bl	8006158 <USBD_CoreFindEP>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
 8005e54:	2bff      	cmp	r3, #255	; 0xff
 8005e56:	d025      	beq.n	8005ea4 <USBD_LL_DataInStage+0x15a>
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d122      	bne.n	8005ea4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d11c      	bne.n	8005ea4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005e6a:	7dfa      	ldrb	r2, [r7, #23]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	32ae      	adds	r2, #174	; 0xae
 8005e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d014      	beq.n	8005ea4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005e7a:	7dfa      	ldrb	r2, [r7, #23]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005e82:	7dfa      	ldrb	r2, [r7, #23]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	32ae      	adds	r2, #174	; 0xae
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	7afa      	ldrb	r2, [r7, #11]
 8005e90:	4611      	mov	r1, r2
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	4798      	blx	r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005e9a:	7dbb      	ldrb	r3, [r7, #22]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ea0:	7dbb      	ldrb	r3, [r7, #22]
 8005ea2:	e000      	b.n	8005ea6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00e      	beq.n	8005f14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6852      	ldr	r2, [r2, #4]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	4611      	mov	r1, r2
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f10:	2303      	movs	r3, #3
 8005f12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f14:	2340      	movs	r3, #64	; 0x40
 8005f16:	2200      	movs	r2, #0
 8005f18:	2100      	movs	r1, #0
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fbd5 	bl	80076ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2240      	movs	r2, #64	; 0x40
 8005f2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f30:	2340      	movs	r3, #64	; 0x40
 8005f32:	2200      	movs	r2, #0
 8005f34:	2180      	movs	r1, #128	; 0x80
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fbc7 	bl	80076ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2240      	movs	r2, #64	; 0x40
 8005f46:	621a      	str	r2, [r3, #32]

  return ret;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d006      	beq.n	8005f94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2204      	movs	r2, #4
 8005f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d106      	bne.n	8005fcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d110      	bne.n	8006010 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00b      	beq.n	8006010 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	32ae      	adds	r2, #174	; 0xae
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006038:	2303      	movs	r3, #3
 800603a:	e01c      	b.n	8006076 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b03      	cmp	r3, #3
 8006046:	d115      	bne.n	8006074 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	32ae      	adds	r2, #174	; 0xae
 8006052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	32ae      	adds	r2, #174	; 0xae
 8006066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	4611      	mov	r1, r2
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	32ae      	adds	r2, #174	; 0xae
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800609c:	2303      	movs	r3, #3
 800609e:	e01c      	b.n	80060da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d115      	bne.n	80060d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	32ae      	adds	r2, #174	; 0xae
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	32ae      	adds	r2, #174	; 0xae
 80060ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	78fa      	ldrb	r2, [r7, #3]
 80060d2:	4611      	mov	r1, r2
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00e      	beq.n	8006134 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6852      	ldr	r2, [r2, #4]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	4611      	mov	r1, r2
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006130:	2303      	movs	r3, #3
 8006132:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800614a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006164:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	460b      	mov	r3, r1
 800617c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	885b      	ldrh	r3, [r3, #2]
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	429a      	cmp	r2, r3
 8006198:	d920      	bls.n	80061dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80061a2:	e013      	b.n	80061cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80061a4:	f107 030a 	add.w	r3, r7, #10
 80061a8:	4619      	mov	r1, r3
 80061aa:	6978      	ldr	r0, [r7, #20]
 80061ac:	f000 f81b 	bl	80061e6 <USBD_GetNextDesc>
 80061b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	785b      	ldrb	r3, [r3, #1]
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	d108      	bne.n	80061cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	789b      	ldrb	r3, [r3, #2]
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d008      	beq.n	80061da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	885b      	ldrh	r3, [r3, #2]
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	897b      	ldrh	r3, [r7, #10]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d8e5      	bhi.n	80061a4 <USBD_GetEpDesc+0x32>
 80061d8:	e000      	b.n	80061dc <USBD_GetEpDesc+0x6a>
          break;
 80061da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80061dc:	693b      	ldr	r3, [r7, #16]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	881a      	ldrh	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	4413      	add	r3, r2
 8006200:	b29a      	uxth	r2, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4413      	add	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006212:	68fb      	ldr	r3, [r7, #12]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	3301      	adds	r3, #1
 8006236:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800623e:	8a3b      	ldrh	r3, [r7, #16]
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	b21a      	sxth	r2, r3
 8006244:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006248:	4313      	orrs	r3, r2
 800624a:	b21b      	sxth	r3, r3
 800624c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800624e:	89fb      	ldrh	r3, [r7, #14]
}
 8006250:	4618      	mov	r0, r3
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d005      	beq.n	8006282 <USBD_StdDevReq+0x26>
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d857      	bhi.n	800632a <USBD_StdDevReq+0xce>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00f      	beq.n	800629e <USBD_StdDevReq+0x42>
 800627e:	2b20      	cmp	r3, #32
 8006280:	d153      	bne.n	800632a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	32ae      	adds	r2, #174	; 0xae
 800628c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
      break;
 800629c:	e04a      	b.n	8006334 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b09      	cmp	r3, #9
 80062a4:	d83b      	bhi.n	800631e <USBD_StdDevReq+0xc2>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <USBD_StdDevReq+0x50>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	08006301 	.word	0x08006301
 80062b0:	08006315 	.word	0x08006315
 80062b4:	0800631f 	.word	0x0800631f
 80062b8:	0800630b 	.word	0x0800630b
 80062bc:	0800631f 	.word	0x0800631f
 80062c0:	080062df 	.word	0x080062df
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	0800631f 	.word	0x0800631f
 80062cc:	080062f7 	.word	0x080062f7
 80062d0:	080062e9 	.word	0x080062e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa3c 	bl	8006754 <USBD_GetDescriptor>
          break;
 80062dc:	e024      	b.n	8006328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fba1 	bl	8006a28 <USBD_SetAddress>
          break;
 80062e6:	e01f      	b.n	8006328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fbe0 	bl	8006ab0 <USBD_SetConfig>
 80062f0:	4603      	mov	r3, r0
 80062f2:	73fb      	strb	r3, [r7, #15]
          break;
 80062f4:	e018      	b.n	8006328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fc83 	bl	8006c04 <USBD_GetConfig>
          break;
 80062fe:	e013      	b.n	8006328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fcb4 	bl	8006c70 <USBD_GetStatus>
          break;
 8006308:	e00e      	b.n	8006328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fce3 	bl	8006cd8 <USBD_SetFeature>
          break;
 8006312:	e009      	b.n	8006328 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fd07 	bl	8006d2a <USBD_ClrFeature>
          break;
 800631c:	e004      	b.n	8006328 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fd5e 	bl	8006de2 <USBD_CtlError>
          break;
 8006326:	bf00      	nop
      }
      break;
 8006328:	e004      	b.n	8006334 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fd58 	bl	8006de2 <USBD_CtlError>
      break;
 8006332:	bf00      	nop
  }

  return ret;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop

08006340 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d005      	beq.n	8006366 <USBD_StdItfReq+0x26>
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d852      	bhi.n	8006404 <USBD_StdItfReq+0xc4>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <USBD_StdItfReq+0x26>
 8006362:	2b20      	cmp	r3, #32
 8006364:	d14e      	bne.n	8006404 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636c:	b2db      	uxtb	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	2b02      	cmp	r3, #2
 8006372:	d840      	bhi.n	80063f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	889b      	ldrh	r3, [r3, #4]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b01      	cmp	r3, #1
 800637c:	d836      	bhi.n	80063ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	889b      	ldrh	r3, [r3, #4]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fed9 	bl	800613e <USBD_CoreFindIF>
 800638c:	4603      	mov	r3, r0
 800638e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	2bff      	cmp	r3, #255	; 0xff
 8006394:	d01d      	beq.n	80063d2 <USBD_StdItfReq+0x92>
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d11a      	bne.n	80063d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800639c:	7bba      	ldrb	r2, [r7, #14]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	32ae      	adds	r2, #174	; 0xae
 80063a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00f      	beq.n	80063cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80063ac:	7bba      	ldrb	r2, [r7, #14]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063b4:	7bba      	ldrb	r2, [r7, #14]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	32ae      	adds	r2, #174	; 0xae
 80063ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80063ca:	e004      	b.n	80063d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80063cc:	2303      	movs	r3, #3
 80063ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80063d0:	e001      	b.n	80063d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80063d2:	2303      	movs	r3, #3
 80063d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	88db      	ldrh	r3, [r3, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d110      	bne.n	8006400 <USBD_StdItfReq+0xc0>
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10d      	bne.n	8006400 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fdc7 	bl	8006f78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063ea:	e009      	b.n	8006400 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fcf7 	bl	8006de2 <USBD_CtlError>
          break;
 80063f4:	e004      	b.n	8006400 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fcf2 	bl	8006de2 <USBD_CtlError>
          break;
 80063fe:	e000      	b.n	8006402 <USBD_StdItfReq+0xc2>
          break;
 8006400:	bf00      	nop
      }
      break;
 8006402:	e004      	b.n	800640e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fceb 	bl	8006de2 <USBD_CtlError>
      break;
 800640c:	bf00      	nop
  }

  return ret;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	889b      	ldrh	r3, [r3, #4]
 800642a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d007      	beq.n	8006448 <USBD_StdEPReq+0x30>
 8006438:	2b40      	cmp	r3, #64	; 0x40
 800643a:	f200 817f 	bhi.w	800673c <USBD_StdEPReq+0x324>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d02a      	beq.n	8006498 <USBD_StdEPReq+0x80>
 8006442:	2b20      	cmp	r3, #32
 8006444:	f040 817a 	bne.w	800673c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff fe83 	bl	8006158 <USBD_CoreFindEP>
 8006452:	4603      	mov	r3, r0
 8006454:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006456:	7b7b      	ldrb	r3, [r7, #13]
 8006458:	2bff      	cmp	r3, #255	; 0xff
 800645a:	f000 8174 	beq.w	8006746 <USBD_StdEPReq+0x32e>
 800645e:	7b7b      	ldrb	r3, [r7, #13]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f040 8170 	bne.w	8006746 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006466:	7b7a      	ldrb	r2, [r7, #13]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800646e:	7b7a      	ldrb	r2, [r7, #13]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	32ae      	adds	r2, #174	; 0xae
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8163 	beq.w	8006746 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006480:	7b7a      	ldrb	r2, [r7, #13]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	32ae      	adds	r2, #174	; 0xae
 8006486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
 8006492:	4603      	mov	r3, r0
 8006494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006496:	e156      	b.n	8006746 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b03      	cmp	r3, #3
 800649e:	d008      	beq.n	80064b2 <USBD_StdEPReq+0x9a>
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	f300 8145 	bgt.w	8006730 <USBD_StdEPReq+0x318>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 809b 	beq.w	80065e2 <USBD_StdEPReq+0x1ca>
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d03c      	beq.n	800652a <USBD_StdEPReq+0x112>
 80064b0:	e13e      	b.n	8006730 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d002      	beq.n	80064c4 <USBD_StdEPReq+0xac>
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d016      	beq.n	80064f0 <USBD_StdEPReq+0xd8>
 80064c2:	e02c      	b.n	800651e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00d      	beq.n	80064e6 <USBD_StdEPReq+0xce>
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	2b80      	cmp	r3, #128	; 0x80
 80064ce:	d00a      	beq.n	80064e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 f93d 	bl	8007754 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064da:	2180      	movs	r1, #128	; 0x80
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 f939 	bl	8007754 <USBD_LL_StallEP>
 80064e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064e4:	e020      	b.n	8006528 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fc7a 	bl	8006de2 <USBD_CtlError>
              break;
 80064ee:	e01b      	b.n	8006528 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	885b      	ldrh	r3, [r3, #2]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10e      	bne.n	8006516 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <USBD_StdEPReq+0xfe>
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d008      	beq.n	8006516 <USBD_StdEPReq+0xfe>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	88db      	ldrh	r3, [r3, #6]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 f91f 	bl	8007754 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fd2e 	bl	8006f78 <USBD_CtlSendStatus>

              break;
 800651c:	e004      	b.n	8006528 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fc5e 	bl	8006de2 <USBD_CtlError>
              break;
 8006526:	bf00      	nop
          }
          break;
 8006528:	e107      	b.n	800673a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d002      	beq.n	800653c <USBD_StdEPReq+0x124>
 8006536:	2b03      	cmp	r3, #3
 8006538:	d016      	beq.n	8006568 <USBD_StdEPReq+0x150>
 800653a:	e04b      	b.n	80065d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00d      	beq.n	800655e <USBD_StdEPReq+0x146>
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b80      	cmp	r3, #128	; 0x80
 8006546:	d00a      	beq.n	800655e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 f901 	bl	8007754 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006552:	2180      	movs	r1, #128	; 0x80
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f001 f8fd 	bl	8007754 <USBD_LL_StallEP>
 800655a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800655c:	e040      	b.n	80065e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fc3e 	bl	8006de2 <USBD_CtlError>
              break;
 8006566:	e03b      	b.n	80065e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	885b      	ldrh	r3, [r3, #2]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d136      	bne.n	80065de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006576:	2b00      	cmp	r3, #0
 8006578:	d004      	beq.n	8006584 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800657a:	7bbb      	ldrb	r3, [r7, #14]
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 f907 	bl	8007792 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fcf7 	bl	8006f78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff fde2 	bl	8006158 <USBD_CoreFindEP>
 8006594:	4603      	mov	r3, r0
 8006596:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006598:	7b7b      	ldrb	r3, [r7, #13]
 800659a:	2bff      	cmp	r3, #255	; 0xff
 800659c:	d01f      	beq.n	80065de <USBD_StdEPReq+0x1c6>
 800659e:	7b7b      	ldrb	r3, [r7, #13]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11c      	bne.n	80065de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80065a4:	7b7a      	ldrb	r2, [r7, #13]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80065ac:	7b7a      	ldrb	r2, [r7, #13]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	32ae      	adds	r2, #174	; 0xae
 80065b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d010      	beq.n	80065de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065bc:	7b7a      	ldrb	r2, [r7, #13]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	32ae      	adds	r2, #174	; 0xae
 80065c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80065d2:	e004      	b.n	80065de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fc03 	bl	8006de2 <USBD_CtlError>
              break;
 80065dc:	e000      	b.n	80065e0 <USBD_StdEPReq+0x1c8>
              break;
 80065de:	bf00      	nop
          }
          break;
 80065e0:	e0ab      	b.n	800673a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d002      	beq.n	80065f4 <USBD_StdEPReq+0x1dc>
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d032      	beq.n	8006658 <USBD_StdEPReq+0x240>
 80065f2:	e097      	b.n	8006724 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <USBD_StdEPReq+0x1f2>
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	2b80      	cmp	r3, #128	; 0x80
 80065fe:	d004      	beq.n	800660a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fbed 	bl	8006de2 <USBD_CtlError>
                break;
 8006608:	e091      	b.n	800672e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800660a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800660e:	2b00      	cmp	r3, #0
 8006610:	da0b      	bge.n	800662a <USBD_StdEPReq+0x212>
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	3310      	adds	r3, #16
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	3304      	adds	r3, #4
 8006628:	e00b      	b.n	8006642 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	3304      	adds	r3, #4
 8006642:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2202      	movs	r2, #2
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fc37 	bl	8006ec4 <USBD_CtlSendData>
              break;
 8006656:	e06a      	b.n	800672e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800665c:	2b00      	cmp	r3, #0
 800665e:	da11      	bge.n	8006684 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	f003 020f 	and.w	r2, r3, #15
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	3324      	adds	r3, #36	; 0x24
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d117      	bne.n	80066aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fbb0 	bl	8006de2 <USBD_CtlError>
                  break;
 8006682:	e054      	b.n	800672e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	f003 020f 	and.w	r2, r3, #15
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fb9d 	bl	8006de2 <USBD_CtlError>
                  break;
 80066a8:	e041      	b.n	800672e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	da0b      	bge.n	80066ca <USBD_StdEPReq+0x2b2>
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	3310      	adds	r3, #16
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4413      	add	r3, r2
 80066c6:	3304      	adds	r3, #4
 80066c8:	e00b      	b.n	80066e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	3304      	adds	r3, #4
 80066e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <USBD_StdEPReq+0x2d8>
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	2b80      	cmp	r3, #128	; 0x80
 80066ee:	d103      	bne.n	80066f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e00e      	b.n	8006716 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 f867 	bl	80077d0 <USBD_LL_IsStallEP>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e002      	b.n	8006716 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2202      	movs	r2, #2
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fbd1 	bl	8006ec4 <USBD_CtlSendData>
              break;
 8006722:	e004      	b.n	800672e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fb5b 	bl	8006de2 <USBD_CtlError>
              break;
 800672c:	bf00      	nop
          }
          break;
 800672e:	e004      	b.n	800673a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fb55 	bl	8006de2 <USBD_CtlError>
          break;
 8006738:	bf00      	nop
      }
      break;
 800673a:	e005      	b.n	8006748 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fb4f 	bl	8006de2 <USBD_CtlError>
      break;
 8006744:	e000      	b.n	8006748 <USBD_StdEPReq+0x330>
      break;
 8006746:	bf00      	nop
  }

  return ret;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	885b      	ldrh	r3, [r3, #2]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	b29b      	uxth	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	2b06      	cmp	r3, #6
 8006776:	f200 8128 	bhi.w	80069ca <USBD_GetDescriptor+0x276>
 800677a:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <USBD_GetDescriptor+0x2c>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	0800679d 	.word	0x0800679d
 8006784:	080067b5 	.word	0x080067b5
 8006788:	080067f5 	.word	0x080067f5
 800678c:	080069cb 	.word	0x080069cb
 8006790:	080069cb 	.word	0x080069cb
 8006794:	0800696b 	.word	0x0800696b
 8006798:	08006997 	.word	0x08006997
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	7c12      	ldrb	r2, [r2, #16]
 80067a8:	f107 0108 	add.w	r1, r7, #8
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
 80067b0:	60f8      	str	r0, [r7, #12]
      break;
 80067b2:	e112      	b.n	80069da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	7c1b      	ldrb	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10d      	bne.n	80067d8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	f107 0208 	add.w	r2, r7, #8
 80067c8:	4610      	mov	r0, r2
 80067ca:	4798      	blx	r3
 80067cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	2202      	movs	r2, #2
 80067d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80067d6:	e100      	b.n	80069da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	f107 0208 	add.w	r2, r7, #8
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
 80067e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3301      	adds	r3, #1
 80067ee:	2202      	movs	r2, #2
 80067f0:	701a      	strb	r2, [r3, #0]
      break;
 80067f2:	e0f2      	b.n	80069da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	885b      	ldrh	r3, [r3, #2]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	f200 80ac 	bhi.w	8006958 <USBD_GetDescriptor+0x204>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <USBD_GetDescriptor+0xb4>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	08006821 	.word	0x08006821
 800680c:	08006855 	.word	0x08006855
 8006810:	08006889 	.word	0x08006889
 8006814:	080068bd 	.word	0x080068bd
 8006818:	080068f1 	.word	0x080068f1
 800681c:	08006925 	.word	0x08006925
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00b      	beq.n	8006844 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	7c12      	ldrb	r2, [r2, #16]
 8006838:	f107 0108 	add.w	r1, r7, #8
 800683c:	4610      	mov	r0, r2
 800683e:	4798      	blx	r3
 8006840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006842:	e091      	b.n	8006968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 facb 	bl	8006de2 <USBD_CtlError>
            err++;
 800684c:	7afb      	ldrb	r3, [r7, #11]
 800684e:	3301      	adds	r3, #1
 8006850:	72fb      	strb	r3, [r7, #11]
          break;
 8006852:	e089      	b.n	8006968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	7c12      	ldrb	r2, [r2, #16]
 800686c:	f107 0108 	add.w	r1, r7, #8
 8006870:	4610      	mov	r0, r2
 8006872:	4798      	blx	r3
 8006874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006876:	e077      	b.n	8006968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fab1 	bl	8006de2 <USBD_CtlError>
            err++;
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	3301      	adds	r3, #1
 8006884:	72fb      	strb	r3, [r7, #11]
          break;
 8006886:	e06f      	b.n	8006968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00b      	beq.n	80068ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	7c12      	ldrb	r2, [r2, #16]
 80068a0:	f107 0108 	add.w	r1, r7, #8
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
 80068a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068aa:	e05d      	b.n	8006968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa97 	bl	8006de2 <USBD_CtlError>
            err++;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	3301      	adds	r3, #1
 80068b8:	72fb      	strb	r3, [r7, #11]
          break;
 80068ba:	e055      	b.n	8006968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7c12      	ldrb	r2, [r2, #16]
 80068d4:	f107 0108 	add.w	r1, r7, #8
 80068d8:	4610      	mov	r0, r2
 80068da:	4798      	blx	r3
 80068dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068de:	e043      	b.n	8006968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa7d 	bl	8006de2 <USBD_CtlError>
            err++;
 80068e8:	7afb      	ldrb	r3, [r7, #11]
 80068ea:	3301      	adds	r3, #1
 80068ec:	72fb      	strb	r3, [r7, #11]
          break;
 80068ee:	e03b      	b.n	8006968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	7c12      	ldrb	r2, [r2, #16]
 8006908:	f107 0108 	add.w	r1, r7, #8
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
 8006910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006912:	e029      	b.n	8006968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa63 	bl	8006de2 <USBD_CtlError>
            err++;
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	3301      	adds	r3, #1
 8006920:	72fb      	strb	r3, [r7, #11]
          break;
 8006922:	e021      	b.n	8006968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7c12      	ldrb	r2, [r2, #16]
 800693c:	f107 0108 	add.w	r1, r7, #8
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
 8006944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006946:	e00f      	b.n	8006968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fa49 	bl	8006de2 <USBD_CtlError>
            err++;
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	3301      	adds	r3, #1
 8006954:	72fb      	strb	r3, [r7, #11]
          break;
 8006956:	e007      	b.n	8006968 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa41 	bl	8006de2 <USBD_CtlError>
          err++;
 8006960:	7afb      	ldrb	r3, [r7, #11]
 8006962:	3301      	adds	r3, #1
 8006964:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006966:	bf00      	nop
      }
      break;
 8006968:	e037      	b.n	80069da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	7c1b      	ldrb	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697a:	f107 0208 	add.w	r2, r7, #8
 800697e:	4610      	mov	r0, r2
 8006980:	4798      	blx	r3
 8006982:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006984:	e029      	b.n	80069da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fa2a 	bl	8006de2 <USBD_CtlError>
        err++;
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	3301      	adds	r3, #1
 8006992:	72fb      	strb	r3, [r7, #11]
      break;
 8006994:	e021      	b.n	80069da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7c1b      	ldrb	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10d      	bne.n	80069ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	f107 0208 	add.w	r2, r7, #8
 80069aa:	4610      	mov	r0, r2
 80069ac:	4798      	blx	r3
 80069ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	2207      	movs	r2, #7
 80069b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069b8:	e00f      	b.n	80069da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fa10 	bl	8006de2 <USBD_CtlError>
        err++;
 80069c2:	7afb      	ldrb	r3, [r7, #11]
 80069c4:	3301      	adds	r3, #1
 80069c6:	72fb      	strb	r3, [r7, #11]
      break;
 80069c8:	e007      	b.n	80069da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fa08 	bl	8006de2 <USBD_CtlError>
      err++;
 80069d2:	7afb      	ldrb	r3, [r7, #11]
 80069d4:	3301      	adds	r3, #1
 80069d6:	72fb      	strb	r3, [r7, #11]
      break;
 80069d8:	bf00      	nop
  }

  if (err != 0U)
 80069da:	7afb      	ldrb	r3, [r7, #11]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d11e      	bne.n	8006a1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	88db      	ldrh	r3, [r3, #6]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d016      	beq.n	8006a16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80069e8:	893b      	ldrh	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00e      	beq.n	8006a0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	88da      	ldrh	r2, [r3, #6]
 80069f2:	893b      	ldrh	r3, [r7, #8]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	bf28      	it	cs
 80069f8:	4613      	movcs	r3, r2
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80069fe:	893b      	ldrh	r3, [r7, #8]
 8006a00:	461a      	mov	r2, r3
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fa5d 	bl	8006ec4 <USBD_CtlSendData>
 8006a0a:	e009      	b.n	8006a20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9e7 	bl	8006de2 <USBD_CtlError>
 8006a14:	e004      	b.n	8006a20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 faae 	bl	8006f78 <USBD_CtlSendStatus>
 8006a1c:	e000      	b.n	8006a20 <USBD_GetDescriptor+0x2cc>
    return;
 8006a1e:	bf00      	nop
  }
}
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop

08006a28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	889b      	ldrh	r3, [r3, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d131      	bne.n	8006a9e <USBD_SetAddress+0x76>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	88db      	ldrh	r3, [r3, #6]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d12d      	bne.n	8006a9e <USBD_SetAddress+0x76>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	885b      	ldrh	r3, [r3, #2]
 8006a46:	2b7f      	cmp	r3, #127	; 0x7f
 8006a48:	d829      	bhi.n	8006a9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	885b      	ldrh	r3, [r3, #2]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d104      	bne.n	8006a6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f9bc 	bl	8006de2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6a:	e01d      	b.n	8006aa8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7bfa      	ldrb	r2, [r7, #15]
 8006a70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fed5 	bl	8007828 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa7a 	bl	8006f78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a92:	e009      	b.n	8006aa8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9c:	e004      	b.n	8006aa8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f99e 	bl	8006de2 <USBD_CtlError>
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	bf00      	nop
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	885b      	ldrh	r3, [r3, #2]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	4b4e      	ldr	r3, [pc, #312]	; (8006c00 <USBD_SetConfig+0x150>)
 8006ac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ac8:	4b4d      	ldr	r3, [pc, #308]	; (8006c00 <USBD_SetConfig+0x150>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d905      	bls.n	8006adc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f985 	bl	8006de2 <USBD_CtlError>
    return USBD_FAIL;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e08c      	b.n	8006bf6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d002      	beq.n	8006aee <USBD_SetConfig+0x3e>
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d029      	beq.n	8006b40 <USBD_SetConfig+0x90>
 8006aec:	e075      	b.n	8006bda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006aee:	4b44      	ldr	r3, [pc, #272]	; (8006c00 <USBD_SetConfig+0x150>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d020      	beq.n	8006b38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006af6:	4b42      	ldr	r3, [pc, #264]	; (8006c00 <USBD_SetConfig+0x150>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b00:	4b3f      	ldr	r3, [pc, #252]	; (8006c00 <USBD_SetConfig+0x150>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fe ffe1 	bl	8005ace <USBD_SetClassConfig>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f962 	bl	8006de2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b26:	e065      	b.n	8006bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa25 	bl	8006f78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2203      	movs	r2, #3
 8006b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b36:	e05d      	b.n	8006bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fa1d 	bl	8006f78 <USBD_CtlSendStatus>
      break;
 8006b3e:	e059      	b.n	8006bf4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006b40:	4b2f      	ldr	r3, [pc, #188]	; (8006c00 <USBD_SetConfig+0x150>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d112      	bne.n	8006b6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006b50:	4b2b      	ldr	r3, [pc, #172]	; (8006c00 <USBD_SetConfig+0x150>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b5a:	4b29      	ldr	r3, [pc, #164]	; (8006c00 <USBD_SetConfig+0x150>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7fe ffd0 	bl	8005b06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa06 	bl	8006f78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b6c:	e042      	b.n	8006bf4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006b6e:	4b24      	ldr	r3, [pc, #144]	; (8006c00 <USBD_SetConfig+0x150>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d02a      	beq.n	8006bd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7fe ffbe 	bl	8005b06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	; (8006c00 <USBD_SetConfig+0x150>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b94:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <USBD_SetConfig+0x150>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fe ff97 	bl	8005ace <USBD_SetClassConfig>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00f      	beq.n	8006bca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f918 	bl	8006de2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fe ffa3 	bl	8005b06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bc8:	e014      	b.n	8006bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f9d4 	bl	8006f78 <USBD_CtlSendStatus>
      break;
 8006bd0:	e010      	b.n	8006bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9d0 	bl	8006f78 <USBD_CtlSendStatus>
      break;
 8006bd8:	e00c      	b.n	8006bf4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f900 	bl	8006de2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006be2:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <USBD_SetConfig+0x150>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7fe ff8c 	bl	8005b06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf2:	bf00      	nop
  }

  return ret;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200001c4 	.word	0x200001c4

08006c04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	88db      	ldrh	r3, [r3, #6]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d004      	beq.n	8006c20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f8e2 	bl	8006de2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c1e:	e023      	b.n	8006c68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	dc02      	bgt.n	8006c32 <USBD_GetConfig+0x2e>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	dc03      	bgt.n	8006c38 <USBD_GetConfig+0x34>
 8006c30:	e015      	b.n	8006c5e <USBD_GetConfig+0x5a>
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d00b      	beq.n	8006c4e <USBD_GetConfig+0x4a>
 8006c36:	e012      	b.n	8006c5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3308      	adds	r3, #8
 8006c42:	2201      	movs	r2, #1
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f93c 	bl	8006ec4 <USBD_CtlSendData>
        break;
 8006c4c:	e00c      	b.n	8006c68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3304      	adds	r3, #4
 8006c52:	2201      	movs	r2, #1
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f934 	bl	8006ec4 <USBD_CtlSendData>
        break;
 8006c5c:	e004      	b.n	8006c68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f8be 	bl	8006de2 <USBD_CtlError>
        break;
 8006c66:	bf00      	nop
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d81e      	bhi.n	8006cc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	88db      	ldrh	r3, [r3, #6]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d004      	beq.n	8006c9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f8a5 	bl	8006de2 <USBD_CtlError>
        break;
 8006c98:	e01a      	b.n	8006cd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	f043 0202 	orr.w	r2, r3, #2
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	2202      	movs	r2, #2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f900 	bl	8006ec4 <USBD_CtlSendData>
      break;
 8006cc4:	e004      	b.n	8006cd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f88a 	bl	8006de2 <USBD_CtlError>
      break;
 8006cce:	bf00      	nop
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	885b      	ldrh	r3, [r3, #2]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d107      	bne.n	8006cfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f940 	bl	8006f78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006cf8:	e013      	b.n	8006d22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d10b      	bne.n	8006d1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	889b      	ldrh	r3, [r3, #4]
 8006d06:	0a1b      	lsrs	r3, r3, #8
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f930 	bl	8006f78 <USBD_CtlSendStatus>
}
 8006d18:	e003      	b.n	8006d22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f860 	bl	8006de2 <USBD_CtlError>
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d80b      	bhi.n	8006d5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	885b      	ldrh	r3, [r3, #2]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d10c      	bne.n	8006d64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f910 	bl	8006f78 <USBD_CtlSendStatus>
      }
      break;
 8006d58:	e004      	b.n	8006d64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f840 	bl	8006de2 <USBD_CtlError>
      break;
 8006d62:	e000      	b.n	8006d66 <USBD_ClrFeature+0x3c>
      break;
 8006d64:	bf00      	nop
  }
}
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3301      	adds	r3, #1
 8006d88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	781a      	ldrb	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff fa41 	bl	8006220 <SWAPBYTE>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461a      	mov	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff fa34 	bl	8006220 <SWAPBYTE>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff fa27 	bl	8006220 <SWAPBYTE>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	80da      	strh	r2, [r3, #6]
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dec:	2180      	movs	r1, #128	; 0x80
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fcb0 	bl	8007754 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006df4:	2100      	movs	r1, #0
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fcac 	bl	8007754 <USBD_LL_StallEP>
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d036      	beq.n	8006e88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e1e:	6938      	ldr	r0, [r7, #16]
 8006e20:	f000 f836 	bl	8006e90 <USBD_GetLen>
 8006e24:	4603      	mov	r3, r0
 8006e26:	3301      	adds	r3, #1
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	4413      	add	r3, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	3301      	adds	r3, #1
 8006e42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4413      	add	r3, r2
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	3301      	adds	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e54:	e013      	b.n	8006e7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	7812      	ldrb	r2, [r2, #0]
 8006e60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	3301      	adds	r3, #1
 8006e66:	613b      	str	r3, [r7, #16]
    idx++;
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	4413      	add	r3, r2
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e7      	bne.n	8006e56 <USBD_GetString+0x52>
 8006e86:	e000      	b.n	8006e8a <USBD_GetString+0x86>
    return;
 8006e88:	bf00      	nop
  }
}
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ea0:	e005      	b.n	8006eae <USBD_GetLen+0x1e>
  {
    len++;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f5      	bne.n	8006ea2 <USBD_GetLen+0x12>
  }

  return len;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fcbb 	bl	8007866 <USBD_LL_Transmit>

  return USBD_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 fcaa 	bl	8007866 <USBD_LL_Transmit>

  return USBD_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2203      	movs	r2, #3
 8006f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	2100      	movs	r1, #0
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 fcae 	bl	80078a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	2100      	movs	r1, #0
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fc9d 	bl	80078a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2204      	movs	r2, #4
 8006f84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fc69 	bl	8007866 <USBD_LL_Transmit>

  return USBD_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2205      	movs	r2, #5
 8006faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fc77 	bl	80078a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4912      	ldr	r1, [pc, #72]	; (8007014 <MX_USB_DEVICE_Init+0x50>)
 8006fcc:	4812      	ldr	r0, [pc, #72]	; (8007018 <MX_USB_DEVICE_Init+0x54>)
 8006fce:	f7fe fd01 	bl	80059d4 <USBD_Init>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006fd8:	f7f9 fbb8 	bl	800074c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006fdc:	490f      	ldr	r1, [pc, #60]	; (800701c <MX_USB_DEVICE_Init+0x58>)
 8006fde:	480e      	ldr	r0, [pc, #56]	; (8007018 <MX_USB_DEVICE_Init+0x54>)
 8006fe0:	f7fe fd28 	bl	8005a34 <USBD_RegisterClass>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006fea:	f7f9 fbaf 	bl	800074c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006fee:	490c      	ldr	r1, [pc, #48]	; (8007020 <MX_USB_DEVICE_Init+0x5c>)
 8006ff0:	4809      	ldr	r0, [pc, #36]	; (8007018 <MX_USB_DEVICE_Init+0x54>)
 8006ff2:	f7fe fc5f 	bl	80058b4 <USBD_CDC_RegisterInterface>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ffc:	f7f9 fba6 	bl	800074c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007000:	4805      	ldr	r0, [pc, #20]	; (8007018 <MX_USB_DEVICE_Init+0x54>)
 8007002:	f7fe fd4d 	bl	8005aa0 <USBD_Start>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800700c:	f7f9 fb9e 	bl	800074c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007010:	bf00      	nop
 8007012:	bd80      	pop	{r7, pc}
 8007014:	200000ac 	.word	0x200000ac
 8007018:	200001c8 	.word	0x200001c8
 800701c:	20000018 	.word	0x20000018
 8007020:	20000098 	.word	0x20000098

08007024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007028:	2200      	movs	r2, #0
 800702a:	4905      	ldr	r1, [pc, #20]	; (8007040 <CDC_Init_FS+0x1c>)
 800702c:	4805      	ldr	r0, [pc, #20]	; (8007044 <CDC_Init_FS+0x20>)
 800702e:	f7fe fc5b 	bl	80058e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007032:	4905      	ldr	r1, [pc, #20]	; (8007048 <CDC_Init_FS+0x24>)
 8007034:	4803      	ldr	r0, [pc, #12]	; (8007044 <CDC_Init_FS+0x20>)
 8007036:	f7fe fc79 	bl	800592c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800703a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800703c:	4618      	mov	r0, r3
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000ca4 	.word	0x20000ca4
 8007044:	200001c8 	.word	0x200001c8
 8007048:	200004a4 	.word	0x200004a4

0800704c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007052:	4618      	mov	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	71fb      	strb	r3, [r7, #7]
 8007068:	4613      	mov	r3, r2
 800706a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b23      	cmp	r3, #35	; 0x23
 8007070:	d84a      	bhi.n	8007108 <CDC_Control_FS+0xac>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <CDC_Control_FS+0x1c>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007109 	.word	0x08007109
 800707c:	08007109 	.word	0x08007109
 8007080:	08007109 	.word	0x08007109
 8007084:	08007109 	.word	0x08007109
 8007088:	08007109 	.word	0x08007109
 800708c:	08007109 	.word	0x08007109
 8007090:	08007109 	.word	0x08007109
 8007094:	08007109 	.word	0x08007109
 8007098:	08007109 	.word	0x08007109
 800709c:	08007109 	.word	0x08007109
 80070a0:	08007109 	.word	0x08007109
 80070a4:	08007109 	.word	0x08007109
 80070a8:	08007109 	.word	0x08007109
 80070ac:	08007109 	.word	0x08007109
 80070b0:	08007109 	.word	0x08007109
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007109 	.word	0x08007109
 80070bc:	08007109 	.word	0x08007109
 80070c0:	08007109 	.word	0x08007109
 80070c4:	08007109 	.word	0x08007109
 80070c8:	08007109 	.word	0x08007109
 80070cc:	08007109 	.word	0x08007109
 80070d0:	08007109 	.word	0x08007109
 80070d4:	08007109 	.word	0x08007109
 80070d8:	08007109 	.word	0x08007109
 80070dc:	08007109 	.word	0x08007109
 80070e0:	08007109 	.word	0x08007109
 80070e4:	08007109 	.word	0x08007109
 80070e8:	08007109 	.word	0x08007109
 80070ec:	08007109 	.word	0x08007109
 80070f0:	08007109 	.word	0x08007109
 80070f4:	08007109 	.word	0x08007109
 80070f8:	08007109 	.word	0x08007109
 80070fc:	08007109 	.word	0x08007109
 8007100:	08007109 	.word	0x08007109
 8007104:	08007109 	.word	0x08007109
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007108:	bf00      	nop
  }

  return (USBD_OK);
 800710a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4805      	ldr	r0, [pc, #20]	; (800713c <CDC_Receive_FS+0x24>)
 8007126:	f7fe fc01 	bl	800592c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800712a:	4804      	ldr	r0, [pc, #16]	; (800713c <CDC_Receive_FS+0x24>)
 800712c:	f7fe fc1c 	bl	8005968 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007130:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	200001c8 	.word	0x200001c8

08007140 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007156:	4618      	mov	r0, r3
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
	...

08007164 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2212      	movs	r2, #18
 8007174:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007176:	4b03      	ldr	r3, [pc, #12]	; (8007184 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	200000c8 	.word	0x200000c8

08007188 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2204      	movs	r2, #4
 8007198:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800719a:	4b03      	ldr	r3, [pc, #12]	; (80071a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	200000dc 	.word	0x200000dc

080071ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	6039      	str	r1, [r7, #0]
 80071b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d105      	bne.n	80071ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	4907      	ldr	r1, [pc, #28]	; (80071e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80071c2:	4808      	ldr	r0, [pc, #32]	; (80071e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80071c4:	f7ff fe1e 	bl	8006e04 <USBD_GetString>
 80071c8:	e004      	b.n	80071d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4904      	ldr	r1, [pc, #16]	; (80071e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80071ce:	4805      	ldr	r0, [pc, #20]	; (80071e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80071d0:	f7ff fe18 	bl	8006e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	200014a4 	.word	0x200014a4
 80071e4:	08007a08 	.word	0x08007a08

080071e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	4904      	ldr	r1, [pc, #16]	; (8007208 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071f8:	4804      	ldr	r0, [pc, #16]	; (800720c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071fa:	f7ff fe03 	bl	8006e04 <USBD_GetString>
  return USBD_StrDesc;
 80071fe:	4b02      	ldr	r3, [pc, #8]	; (8007208 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	200014a4 	.word	0x200014a4
 800720c:	08007a20 	.word	0x08007a20

08007210 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	6039      	str	r1, [r7, #0]
 800721a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	221a      	movs	r2, #26
 8007220:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007222:	f000 f843 	bl	80072ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007226:	4b02      	ldr	r3, [pc, #8]	; (8007230 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	200000e0 	.word	0x200000e0

08007234 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	6039      	str	r1, [r7, #0]
 800723e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d105      	bne.n	8007252 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	4907      	ldr	r1, [pc, #28]	; (8007268 <USBD_FS_ConfigStrDescriptor+0x34>)
 800724a:	4808      	ldr	r0, [pc, #32]	; (800726c <USBD_FS_ConfigStrDescriptor+0x38>)
 800724c:	f7ff fdda 	bl	8006e04 <USBD_GetString>
 8007250:	e004      	b.n	800725c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	4904      	ldr	r1, [pc, #16]	; (8007268 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007256:	4805      	ldr	r0, [pc, #20]	; (800726c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007258:	f7ff fdd4 	bl	8006e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800725c:	4b02      	ldr	r3, [pc, #8]	; (8007268 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	200014a4 	.word	0x200014a4
 800726c:	08007a34 	.word	0x08007a34

08007270 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	6039      	str	r1, [r7, #0]
 800727a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d105      	bne.n	800728e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	4907      	ldr	r1, [pc, #28]	; (80072a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007286:	4808      	ldr	r0, [pc, #32]	; (80072a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007288:	f7ff fdbc 	bl	8006e04 <USBD_GetString>
 800728c:	e004      	b.n	8007298 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	4904      	ldr	r1, [pc, #16]	; (80072a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007292:	4805      	ldr	r0, [pc, #20]	; (80072a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007294:	f7ff fdb6 	bl	8006e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007298:	4b02      	ldr	r3, [pc, #8]	; (80072a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	200014a4 	.word	0x200014a4
 80072a8:	08007a40 	.word	0x08007a40

080072ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072b2:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <Get_SerialNum+0x44>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072b8:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <Get_SerialNum+0x48>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072be:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <Get_SerialNum+0x4c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4413      	add	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072d2:	2208      	movs	r2, #8
 80072d4:	4909      	ldr	r1, [pc, #36]	; (80072fc <Get_SerialNum+0x50>)
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f814 	bl	8007304 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072dc:	2204      	movs	r2, #4
 80072de:	4908      	ldr	r1, [pc, #32]	; (8007300 <Get_SerialNum+0x54>)
 80072e0:	68b8      	ldr	r0, [r7, #8]
 80072e2:	f000 f80f 	bl	8007304 <IntToUnicode>
  }
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	1fff7a10 	.word	0x1fff7a10
 80072f4:	1fff7a14 	.word	0x1fff7a14
 80072f8:	1fff7a18 	.word	0x1fff7a18
 80072fc:	200000e2 	.word	0x200000e2
 8007300:	200000f2 	.word	0x200000f2

08007304 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007316:	2300      	movs	r3, #0
 8007318:	75fb      	strb	r3, [r7, #23]
 800731a:	e027      	b.n	800736c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	0f1b      	lsrs	r3, r3, #28
 8007320:	2b09      	cmp	r3, #9
 8007322:	d80b      	bhi.n	800733c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	0f1b      	lsrs	r3, r3, #28
 8007328:	b2da      	uxtb	r2, r3
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	4619      	mov	r1, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	440b      	add	r3, r1
 8007334:	3230      	adds	r2, #48	; 0x30
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	e00a      	b.n	8007352 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	0f1b      	lsrs	r3, r3, #28
 8007340:	b2da      	uxtb	r2, r3
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	4619      	mov	r1, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	440b      	add	r3, r1
 800734c:	3237      	adds	r2, #55	; 0x37
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	3301      	adds	r3, #1
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	4413      	add	r3, r2
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	3301      	adds	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
 800736c:	7dfa      	ldrb	r2, [r7, #23]
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	429a      	cmp	r2, r3
 8007372:	d3d3      	bcc.n	800731c <IntToUnicode+0x18>
  }
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
	...

08007384 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	; 0x28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800738c:	f107 0314 	add.w	r3, r7, #20
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	609a      	str	r2, [r3, #8]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073a4:	d13a      	bne.n	800741c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <HAL_PCD_MspInit+0xa0>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <HAL_PCD_MspInit+0xa0>)
 80073b0:	f043 0301 	orr.w	r3, r3, #1
 80073b4:	6313      	str	r3, [r2, #48]	; 0x30
 80073b6:	4b1b      	ldr	r3, [pc, #108]	; (8007424 <HAL_PCD_MspInit+0xa0>)
 80073b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80073c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073c8:	2302      	movs	r3, #2
 80073ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073d0:	2303      	movs	r3, #3
 80073d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073d4:	230a      	movs	r3, #10
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073d8:	f107 0314 	add.w	r3, r7, #20
 80073dc:	4619      	mov	r1, r3
 80073de:	4812      	ldr	r0, [pc, #72]	; (8007428 <HAL_PCD_MspInit+0xa4>)
 80073e0:	f7fa fb22 	bl	8001a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <HAL_PCD_MspInit+0xa0>)
 80073e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e8:	4a0e      	ldr	r2, [pc, #56]	; (8007424 <HAL_PCD_MspInit+0xa0>)
 80073ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ee:	6353      	str	r3, [r2, #52]	; 0x34
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <HAL_PCD_MspInit+0xa0>)
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	4a0a      	ldr	r2, [pc, #40]	; (8007424 <HAL_PCD_MspInit+0xa0>)
 80073fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073fe:	6453      	str	r3, [r2, #68]	; 0x44
 8007400:	4b08      	ldr	r3, [pc, #32]	; (8007424 <HAL_PCD_MspInit+0xa0>)
 8007402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800740c:	2200      	movs	r2, #0
 800740e:	2100      	movs	r1, #0
 8007410:	2043      	movs	r0, #67	; 0x43
 8007412:	f7f9 ffe8 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007416:	2043      	movs	r0, #67	; 0x43
 8007418:	f7fa f801 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800741c:	bf00      	nop
 800741e:	3728      	adds	r7, #40	; 0x28
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40023800 	.word	0x40023800
 8007428:	40020000 	.word	0x40020000

0800742c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fe fb79 	bl	8005b3a <USBD_LL_SetupStage>
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007462:	78fa      	ldrb	r2, [r7, #3]
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	4619      	mov	r1, r3
 800747a:	f7fe fbb3 	bl	8005be4 <USBD_LL_DataOutStage>
}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007498:	78fa      	ldrb	r2, [r7, #3]
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	3320      	adds	r3, #32
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	4619      	mov	r1, r3
 80074ae:	f7fe fc4c 	bl	8005d4a <USBD_LL_DataInStage>
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fe fd86 	bl	8005fda <USBD_LL_SOF>
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074de:	2301      	movs	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	79db      	ldrb	r3, [r3, #7]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d001      	beq.n	80074ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80074ea:	f7f9 f92f 	bl	800074c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80074f4:	7bfa      	ldrb	r2, [r7, #15]
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fd2a 	bl	8005f52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe fcd2 	bl	8005eae <USBD_LL_Reset>
}
 800750a:	bf00      	nop
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fd25 	bl	8005f72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6812      	ldr	r2, [r2, #0]
 8007536:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7adb      	ldrb	r3, [r3, #11]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <HAL_PCD_SuspendCallback+0x48>)
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	4a03      	ldr	r2, [pc, #12]	; (800755c <HAL_PCD_SuspendCallback+0x48>)
 800754e:	f043 0306 	orr.w	r3, r3, #6
 8007552:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	e000ed00 	.word	0xe000ed00

08007560 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe fd1b 	bl	8005faa <USBD_LL_Resume>
}
 8007574:	bf00      	nop
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	4611      	mov	r1, r2
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fd73 	bl	800607e <USBD_LL_IsoOUTIncomplete>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fd2f 	bl	800601a <USBD_LL_IsoINIncomplete>
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fd85 	bl	80060e2 <USBD_LL_DevConnected>
}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fd82 	bl	80060f8 <USBD_LL_DevDisconnected>
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d13c      	bne.n	8007686 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800760c:	4a20      	ldr	r2, [pc, #128]	; (8007690 <USBD_LL_Init+0x94>)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a1e      	ldr	r2, [pc, #120]	; (8007690 <USBD_LL_Init+0x94>)
 8007618:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800761c:	4b1c      	ldr	r3, [pc, #112]	; (8007690 <USBD_LL_Init+0x94>)
 800761e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007622:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007624:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <USBD_LL_Init+0x94>)
 8007626:	2204      	movs	r2, #4
 8007628:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800762a:	4b19      	ldr	r3, [pc, #100]	; (8007690 <USBD_LL_Init+0x94>)
 800762c:	2202      	movs	r2, #2
 800762e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007630:	4b17      	ldr	r3, [pc, #92]	; (8007690 <USBD_LL_Init+0x94>)
 8007632:	2200      	movs	r2, #0
 8007634:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007636:	4b16      	ldr	r3, [pc, #88]	; (8007690 <USBD_LL_Init+0x94>)
 8007638:	2202      	movs	r2, #2
 800763a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800763c:	4b14      	ldr	r3, [pc, #80]	; (8007690 <USBD_LL_Init+0x94>)
 800763e:	2200      	movs	r2, #0
 8007640:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007642:	4b13      	ldr	r3, [pc, #76]	; (8007690 <USBD_LL_Init+0x94>)
 8007644:	2200      	movs	r2, #0
 8007646:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007648:	4b11      	ldr	r3, [pc, #68]	; (8007690 <USBD_LL_Init+0x94>)
 800764a:	2200      	movs	r2, #0
 800764c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800764e:	4b10      	ldr	r3, [pc, #64]	; (8007690 <USBD_LL_Init+0x94>)
 8007650:	2200      	movs	r2, #0
 8007652:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007654:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <USBD_LL_Init+0x94>)
 8007656:	2200      	movs	r2, #0
 8007658:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800765a:	480d      	ldr	r0, [pc, #52]	; (8007690 <USBD_LL_Init+0x94>)
 800765c:	f7fa fb68 	bl	8001d30 <HAL_PCD_Init>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007666:	f7f9 f871 	bl	800074c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800766a:	2180      	movs	r1, #128	; 0x80
 800766c:	4808      	ldr	r0, [pc, #32]	; (8007690 <USBD_LL_Init+0x94>)
 800766e:	f7fb fd92 	bl	8003196 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007672:	2240      	movs	r2, #64	; 0x40
 8007674:	2100      	movs	r1, #0
 8007676:	4806      	ldr	r0, [pc, #24]	; (8007690 <USBD_LL_Init+0x94>)
 8007678:	f7fb fd46 	bl	8003108 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800767c:	2280      	movs	r2, #128	; 0x80
 800767e:	2101      	movs	r1, #1
 8007680:	4803      	ldr	r0, [pc, #12]	; (8007690 <USBD_LL_Init+0x94>)
 8007682:	f7fb fd41 	bl	8003108 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	200016a4 	.word	0x200016a4

08007694 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fa fc4f 	bl	8001f4e <HAL_PCD_Start>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f942 	bl	8007940 <USBD_Get_USB_Status>
 80076bc:	4603      	mov	r3, r0
 80076be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	4608      	mov	r0, r1
 80076d4:	4611      	mov	r1, r2
 80076d6:	461a      	mov	r2, r3
 80076d8:	4603      	mov	r3, r0
 80076da:	70fb      	strb	r3, [r7, #3]
 80076dc:	460b      	mov	r3, r1
 80076de:	70bb      	strb	r3, [r7, #2]
 80076e0:	4613      	mov	r3, r2
 80076e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076f2:	78bb      	ldrb	r3, [r7, #2]
 80076f4:	883a      	ldrh	r2, [r7, #0]
 80076f6:	78f9      	ldrb	r1, [r7, #3]
 80076f8:	f7fb f923 	bl	8002942 <HAL_PCD_EP_Open>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f91c 	bl	8007940 <USBD_Get_USB_Status>
 8007708:	4603      	mov	r3, r0
 800770a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800770c:	7bbb      	ldrb	r3, [r7, #14]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	4611      	mov	r1, r2
 8007734:	4618      	mov	r0, r3
 8007736:	f7fb f96c 	bl	8002a12 <HAL_PCD_EP_Close>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f8fd 	bl	8007940 <USBD_Get_USB_Status>
 8007746:	4603      	mov	r3, r0
 8007748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774a:	7bbb      	ldrb	r3, [r7, #14]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f7fb fa24 	bl	8002bc0 <HAL_PCD_EP_SetStall>
 8007778:	4603      	mov	r3, r0
 800777a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f8de 	bl	8007940 <USBD_Get_USB_Status>
 8007784:	4603      	mov	r3, r0
 8007786:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007788:	7bbb      	ldrb	r3, [r7, #14]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077ac:	78fa      	ldrb	r2, [r7, #3]
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fb fa68 	bl	8002c86 <HAL_PCD_EP_ClrStall>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 f8bf 	bl	8007940 <USBD_Get_USB_Status>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	da0b      	bge.n	8007804 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077f2:	68f9      	ldr	r1, [r7, #12]
 80077f4:	4613      	mov	r3, r2
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	440b      	add	r3, r1
 80077fe:	3316      	adds	r3, #22
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	e00b      	b.n	800781c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	4613      	mov	r3, r2
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	f203 2356 	addw	r3, r3, #598	; 0x256
 800781a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fb f857 	bl	80028fa <HAL_PCD_SetAddress>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f874 	bl	8007940 <USBD_Get_USB_Status>
 8007858:	4603      	mov	r3, r0
 800785a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800785c:	7bbb      	ldrb	r3, [r7, #14]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b086      	sub	sp, #24
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	460b      	mov	r3, r1
 8007874:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007884:	7af9      	ldrb	r1, [r7, #11]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	f7fb f95f 	bl	8002b4c <HAL_PCD_EP_Transmit>
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 f853 	bl	8007940 <USBD_Get_USB_Status>
 800789a:	4603      	mov	r3, r0
 800789c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800789e:	7dbb      	ldrb	r3, [r7, #22]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	607a      	str	r2, [r7, #4]
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	460b      	mov	r3, r1
 80078b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80078c6:	7af9      	ldrb	r1, [r7, #11]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	f7fb f8eb 	bl	8002aa6 <HAL_PCD_EP_Receive>
 80078d0:	4603      	mov	r3, r0
 80078d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f832 	bl	8007940 <USBD_Get_USB_Status>
 80078dc:	4603      	mov	r3, r0
 80078de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	460b      	mov	r3, r1
 80078f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078fc:	78fa      	ldrb	r2, [r7, #3]
 80078fe:	4611      	mov	r1, r2
 8007900:	4618      	mov	r0, r3
 8007902:	f7fb f90b 	bl	8002b1c <HAL_PCD_EP_GetRxCount>
 8007906:	4603      	mov	r3, r0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007918:	4b03      	ldr	r3, [pc, #12]	; (8007928 <USBD_static_malloc+0x18>)
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	20001b88 	.word	0x20001b88

0800792c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	2b03      	cmp	r3, #3
 8007952:	d817      	bhi.n	8007984 <USBD_Get_USB_Status+0x44>
 8007954:	a201      	add	r2, pc, #4	; (adr r2, 800795c <USBD_Get_USB_Status+0x1c>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	0800796d 	.word	0x0800796d
 8007960:	08007973 	.word	0x08007973
 8007964:	08007979 	.word	0x08007979
 8007968:	0800797f 	.word	0x0800797f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73fb      	strb	r3, [r7, #15]
    break;
 8007970:	e00b      	b.n	800798a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007972:	2303      	movs	r3, #3
 8007974:	73fb      	strb	r3, [r7, #15]
    break;
 8007976:	e008      	b.n	800798a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007978:	2301      	movs	r3, #1
 800797a:	73fb      	strb	r3, [r7, #15]
    break;
 800797c:	e005      	b.n	800798a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800797e:	2303      	movs	r3, #3
 8007980:	73fb      	strb	r3, [r7, #15]
    break;
 8007982:	e002      	b.n	800798a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	73fb      	strb	r3, [r7, #15]
    break;
 8007988:	bf00      	nop
  }
  return usb_status;
 800798a:	7bfb      	ldrb	r3, [r7, #15]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <memset>:
 8007998:	4402      	add	r2, r0
 800799a:	4603      	mov	r3, r0
 800799c:	4293      	cmp	r3, r2
 800799e:	d100      	bne.n	80079a2 <memset+0xa>
 80079a0:	4770      	bx	lr
 80079a2:	f803 1b01 	strb.w	r1, [r3], #1
 80079a6:	e7f9      	b.n	800799c <memset+0x4>

080079a8 <__libc_init_array>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4d0d      	ldr	r5, [pc, #52]	; (80079e0 <__libc_init_array+0x38>)
 80079ac:	4c0d      	ldr	r4, [pc, #52]	; (80079e4 <__libc_init_array+0x3c>)
 80079ae:	1b64      	subs	r4, r4, r5
 80079b0:	10a4      	asrs	r4, r4, #2
 80079b2:	2600      	movs	r6, #0
 80079b4:	42a6      	cmp	r6, r4
 80079b6:	d109      	bne.n	80079cc <__libc_init_array+0x24>
 80079b8:	4d0b      	ldr	r5, [pc, #44]	; (80079e8 <__libc_init_array+0x40>)
 80079ba:	4c0c      	ldr	r4, [pc, #48]	; (80079ec <__libc_init_array+0x44>)
 80079bc:	f000 f818 	bl	80079f0 <_init>
 80079c0:	1b64      	subs	r4, r4, r5
 80079c2:	10a4      	asrs	r4, r4, #2
 80079c4:	2600      	movs	r6, #0
 80079c6:	42a6      	cmp	r6, r4
 80079c8:	d105      	bne.n	80079d6 <__libc_init_array+0x2e>
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d0:	4798      	blx	r3
 80079d2:	3601      	adds	r6, #1
 80079d4:	e7ee      	b.n	80079b4 <__libc_init_array+0xc>
 80079d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079da:	4798      	blx	r3
 80079dc:	3601      	adds	r6, #1
 80079de:	e7f2      	b.n	80079c6 <__libc_init_array+0x1e>
 80079e0:	08007a70 	.word	0x08007a70
 80079e4:	08007a70 	.word	0x08007a70
 80079e8:	08007a70 	.word	0x08007a70
 80079ec:	08007a74 	.word	0x08007a74

080079f0 <_init>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	bf00      	nop
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr

080079fc <_fini>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr
